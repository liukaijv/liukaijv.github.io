<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>模拟器运行instantRunSplitApkResourcesDebug报错</title>
    <url>/2020/02/13/android/%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%BF%90%E8%A1%8CinstantRunSplitApkResourcesDebug%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>android应用模拟器运行里提示<code>/app/build/intermediates/instant_run_split_apk_resources/debug/instantRunSplitApkResourcesDebug/out/slice_1/resources_ap</code>报错，解决方法：</p>
<p>依次打开<br>Preferences | Build, Execution, Deployment | Instant Run</p>
<p>不勾选<br>Enable Instant Run to hot swap code/resource changes on deploy(default enabled)</p>
]]></content>
      <categories>
        <category>移动开发</category>
        <category>android</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache的访问权限配置</title>
    <url>/2015/03/03/develop/Apache%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在apache2.4版本之前做客户端访问控制,是用Allow Deny Order指令做访问控制的,而在2.4的版本上是用的用法跟之前的版本大不相同,如下</p>
<pre><code>################################################ 
2.2上的配置 
Order deny,allow 
Deny from all 
 
2.4上的配置 
Require all denied 
 
################################################ 
2.2上的配置 
Order allow,deny 
Allow from all 
 
2.4上的配置 
Require all granted 
 
################################################# 
</code></pre>
<span id="more"></span>

<p>下面给出了几个例子在2.4版本上的配置</p>
<p>1、仅允许IP为192.168.1.1的主机访问</p>
<pre><code>require all  granted 
require ip 192.168.1.1 
</code></pre>
<p>2、仅允许192.168.0.0/24网络的主机访问</p>
<pre><code>require all  granted  
require ip 192.168.1.0/24 
</code></pre>
<p>3、禁止192.168.1.2的主机访问,其他的都允许访问,</p>
<pre><code>require all  granted 
require not ip 192.168.1.2 
</code></pre>
<p>4、允许所有访问,</p>
<pre><code>require all  granted
 
</code></pre>
<p>5、拒绝所有访问,</p>
<pre><code>require all  denied 
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch分页大于10000条数据限制修改</title>
    <url>/2023/05/29/develop/elasticsearch%E5%88%86%E9%A1%B5%E5%A4%A7%E4%BA%8E10000%E6%9D%A1%E6%95%B0%E6%8D%AE%E9%99%90%E5%88%B6%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<p>elasticsearch采用from+size分页时，数据量大于1W会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Result window is too large, from + size must be less than or equal to: [10000] but was [100001]</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 所有索引</span></span><br><span class="line">curl -X PUT -H &#x27;Content-Type: application/json&#x27; 172.24.0.171:9200/_all/_settings -d &#x27;&#123; &quot;index.max_result_window&quot; :&quot;100000&quot;&#125;&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定product_order索引</span></span><br><span class="line">curl -X PUT -H &#x27;Content-Type: application/json&#x27; 172.24.0.171:9200/product_order/_settings -d &#x27;&#123; &quot;index.max_result_window&quot; :&quot;100000&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7升级gcc.md</title>
    <url>/2022/02/25/develop/centos7%E5%8D%87%E7%BA%A7gcc/</url>
    <content><![CDATA[<p>centos7默认安装的gcc版本是4.8.5，升级为最新版本</p>
<p>安装<code>centos-release-scl</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br></pre></td></tr></table></figure>

<p>查看可安装的<code>devtoolset</code>版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum search devtoolset</span><br></pre></td></tr></table></figure>

<p>安装对应的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install devtoolset-8-gcc</span><br><span class="line">sudo yum install devtoolset-8-gcc-c++</span><br></pre></td></tr></table></figure>

<p>安装<code>devtoolset</code>之后的目录是<code>/opt/rh/devtoolset-8</code></p>
<p>激活</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo source /opt/rh/devtoolset-8/enable</span><br></pre></td></tr></table></figure>

<p>替换centos是老版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 替换gcc</span></span><br><span class="line">sudo mv /usr/bin/gcc /usr/bin/gcc_bak</span><br><span class="line">sudo ln -s /opt/rh/devtoolset-8/root/bin/gcc /usr/bin/gcc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换g++</span></span><br><span class="line">sudo mv /usr/bin/g++ /usr/bin/g++_bak</span><br><span class="line">sudo ln -s /opt/rh/devtoolset-8/root/bin/g++ /usr/bin/g++</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>git文件名过长错误解决方法</title>
    <url>/2022/09/17/develop/git%E6%96%87%E4%BB%B6%E5%90%8D%E8%BF%87%E9%95%BF%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>git使用过程中，出现<code>error: unable to create file xxx: Filename too long Updated 0 paths from the index</code></p>
<p>原因是windows的git版本中如果是文件名太长了，git会报错</p>
<p>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选其一</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局设置</span></span><br><span class="line">git config --global core.longpaths true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前项目设置</span></span><br><span class="line">git config core.longpaths true</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>certbot配置证书</title>
    <url>/2022/03/28/develop/certbot%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>之前配置证书一直用<code>https://github.com/acmesh-official/acme.sh</code>，网络原因生成时好时坏；换成<code>Certbot</code>后简单多了</p>
<p><code>contos7</code>下安装<code>Certbot</code></p>
<p><code>certbot</code>官网：<a href="https://certbot.eff.org/instructions">https://certbot.eff.org/instructions</a></p>
<h2 id="先安装snapd"><a href="#先安装snapd" class="headerlink" title="先安装snapd"></a>先安装snapd</h2><p>官网<a href="https://snapcraft.io/docs/installing-snap-on-centos">https://snapcraft.io/docs/installing-snap-on-centos</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install snapd</span><br><span class="line">sudo systemctl enable --now snapd.socket</span><br><span class="line">sudo ln -s /var/lib/snapd/snap /snap</span><br></pre></td></tr></table></figure>

<p>更新snapd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo snap install core;</span><br><span class="line">sudo snap refresh core</span><br></pre></td></tr></table></figure>

<h2 id="安装Certbot"><a href="#安装Certbot" class="headerlink" title="安装Certbot"></a>安装Certbot</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo snap install --classic certbot</span><br><span class="line">sudo ln -s /snap/bin/certbot /usr/bin/certbot</span><br></pre></td></tr></table></figure>

<h2 id="nginx证书"><a href="#nginx证书" class="headerlink" title="nginx证书"></a>nginx证书</h2><p>会自动找到<code>conf</code>所有域名并设置好证书</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>ssl</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>github多帐号添加ssh公钥</title>
    <url>/2018/03/03/develop/github%E5%A4%9A%E5%B8%90%E5%8F%B7%E6%B7%BB%E5%8A%A0SSH%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<p>github有两个账号，但是同一个ssh公钥只能添加给一个账号，需要再生成一个密匙后添加。步骤如下：</p>
<h2 id="再添加一个ssh密匙"><a href="#再添加一个ssh密匙" class="headerlink" title="再添加一个ssh密匙"></a>再添加一个ssh密匙</h2><p>1、指定邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure>

<p>2、提示输入生成位置和文件名，取个不同的名称。如: /Users/you/.ssh/id_rsa1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> swhich to save the key (/Users/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>3、输入密码，不用设置，一路回车到完成，生成的文件为：<code>/Users/you/.ssh/id_rsa1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again: </span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:HlteuP6zblxHGjEFh9hLohazijWnxO/aJx0zimpy0lY your_email@example.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|              ++.|</span></span><br><span class="line"><span class="string">|           o oo+.|</span></span><br><span class="line"><span class="string">|        .   = ooo|</span></span><br><span class="line"><span class="string">|         = *  ...|</span></span><br><span class="line"><span class="string">|        S X .  + |</span></span><br><span class="line"><span class="string">|       o E + +o .|</span></span><br><span class="line"><span class="string">|      . + =.o.+. |</span></span><br><span class="line"><span class="string">|     o = o =+o   |</span></span><br><span class="line"><span class="string">|      *.. o=Bo   |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>

<h2 id="生成的ssh公钥添加到github"><a href="#生成的ssh公钥添加到github" class="headerlink" title="生成的ssh公钥添加到github"></a>生成的ssh公钥添加到github</h2><p>复制出生成的ssh公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; /Users/you/.ssh/id_rsa1.pub</span><br></pre></td></tr></table></figure>

<p>github网站setting的SSH and GPG keys新建一个key粘进去</p>
<h2 id="ssh-config文件里添加一个host"><a href="#ssh-config文件里添加一个host" class="headerlink" title="ssh config文件里添加一个host"></a>ssh config文件里添加一个host</h2><p>ssh目录没config文件，新建一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host github1</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa1</span><br></pre></td></tr></table></figure>

<h2 id="修改仓库地址"><a href="#修改仓库地址" class="headerlink" title="修改仓库地址"></a>修改仓库地址</h2><p>第二个账号的git地址中<code>git@github.com</code>都改为<code>github1</code>，如：<code>git@github.com:you/your-repo.git</code>变为<code>github1:you/your-repo.git</code></p>
<p>添加仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin github1:you/your-repo.git</span><br></pre></td></tr></table></figure>

<p>修改仓库地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin github1:you/your-repo.git</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git统计提交记录中修改过的文件</title>
    <url>/2022/09/20/develop/git%E7%BB%9F%E8%AE%A1%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%E4%B8%AD%E4%BF%AE%E6%94%B9%E8%BF%87%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>使用git的log命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> start_commit_id 起始提交ID</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> end_commit_id 结束提交ID</span></span><br><span class="line">git log --author=abc --name-only --pretty= start_commit_id..end_commit_id</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只显示文件<code>pretty</code>必须为空</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示commit_id和文件</span></span><br><span class="line">git log --author=abc --name-only --pretty=oneline start_commit_id..end_commit_id</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git遇到pull出现403问题</title>
    <url>/2022/02/22/develop/git%E9%81%87%E5%88%B0pull%E5%87%BA%E7%8E%B0403%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>git拉代码失败，不提示输入账号密码，出现<code>The requested URL returned error: 403</code></p>
<p>解决方法，清除密码缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --local --unset credential.helper</span><br><span class="line">git config --global --unset credential.helper</span><br><span class="line">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure>

<p>之后就可以重新输入账号密码拉代码了</p>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git错误invalid path解决方法</title>
    <url>/2022/09/17/develop/git%E9%94%99%E8%AF%AFinvalid-path%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在windows上git clone代码时报错：error: invalid path ‘xxxx’</p>
<p>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config core.protectNTFS false</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">core.protectNTFS</span><br><span class="line">If set to true, do not allow checkout of paths that would cause problems with the NTFS filesystem, e.g. conflict with 8.3 &quot;short&quot; names. Defaults to true on Windows, and false elsewhere.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>golang设置GOROOT报错</title>
    <url>/2022/02/23/develop/golang%E8%AE%BE%E7%BD%AEgoroot%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>升级了go到1.17.7后，goland打开项目设置<code>GOROOT</code>设置不了，提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The selected directory is not a valid home for Go SDK</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>找到go安装目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env | grep GOROOT</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> GOROOT=D:\Go</span></span><br></pre></td></tr></table></figure>

<p>找到<code>D:\Go\src\runtime\internal\sys\zversion.go</code>文件，添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定版本</span></span><br><span class="line">const TheVersion = `go1.17.7`</span><br></pre></td></tr></table></figure>

<p>重启goland，设置下拉里就出现<code>go1.17.7</code>的选项了</p>
]]></content>
      <categories>
        <category>编程笔记</category>
        <category>问题</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>goland</tag>
      </tags>
  </entry>
  <entry>
    <title>grafana重置密码</title>
    <url>/2022/01/21/develop/grafana%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>找到<code>grafana.db</code>数据库，用sqlite工具执行下无sql语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> password <span class="operator">=</span> <span class="string">&#x27;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&#x27;</span>, salt <span class="operator">=</span> <span class="string">&#x27;F3FAxVm33R&#x27;</span> <span class="keyword">where</span> login <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>重置后登录用户和密码为：admin/admin</p>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的md文件中使用html、css、javascript</title>
    <url>/2015/03/28/develop/hexo%E7%9A%84md%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8html/</url>
    <content><![CDATA[<p>有时候想写点前端小demo，因为代码量实在是太少了，几行css、几行javascript；不想放在codepen作为引用，也不想单独做一个页面放到主题的source文件夹下，于是就有了在md文件里直接写的想法。</p>
<span id="more"></span>

<h2 id="开始折腾"><a href="#开始折腾" class="headerlink" title="开始折腾"></a>开始折腾</h2><h3 id="1、直接插入"><a href="#1、直接插入" class="headerlink" title="1、直接插入"></a>1、直接插入</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 正文</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.styled-div</span>&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;styled-div&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(<span class="string">&#x27;我是md是的javascript&#x27;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;)();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<style>
.styled-div{
    width: 100px;
    height: 100px;
    background: yellow;
}
</style>
<div class="styled-div">我是div</div>

<p>html和javascript成功了，但是style没有成功……。</p>
<h3 id="2、把css放到行内"><a href="#2、把css放到行内" class="headerlink" title="2、把css放到行内"></a>2、把css放到行内</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 正文</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background: yellow;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div style="width: 100px;height: 100px;background: yellow;">我是div</div>


<p>样式放在行内是可以的。怎么让放在style里的样式也有效呢？</p>
<h3 id="3、使用raw"><a href="#3、使用raw" class="headerlink" title="3、使用raw:"></a>3、使用raw:</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 正文</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.styled-div1</span>&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;styled-div-other&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>


<style>
.styled-div-other{
	width: 100px;
	height: 100px;
	background: yellow;
}
</style>
<div class="styled-div-other">我是div</div>


<p>style里的样式有效了</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote>
<p>html，js，css 都应该写在raw标签里。</p>
</blockquote>
<p>方法一、二中，好像是直接在md里写html和javascript都行，但当这篇文章写到第三种方法的时候，js报错了，并且页面布局也有点乱。用web开发都工具看了下，<code>&lt;div class=&quot;styled-div&quot;&gt;我是div&lt;/div&gt;</code>和<code>&lt;script&gt;&lt;/script&gt;</code>中都生成了很多’<br>‘标签。</p>
<p>所以要在md中杂点其它东西。放在raw标签里才是正确的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 正文</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.styled-div-right</span>&#123;</span></span><br><span class="line"><span class="css">	<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	<span class="attribute">background</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;styled-div-right&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(<span class="string">&#x27;我才是正确的md里的javascript&#x27;</span>);</span></span><br><span class="line"><span class="javascript">	&#125;)();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<style>
.styled-div-right{
	width: 100px;
	height: 100px;
	background: yellow;
}
</style>
<div class="styled-div-right">我是正确的</div>
<script>
	(function(){
		console.log('我才是正确的md里的javascript');
	})();
</script>


<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在markdown里写html的东西有点不合理，取决于各自吧。介绍下另外两种方式：</p>
<ul>
<li>在source文件下创建单独html页面</li>
<li>内嵌第三方的演示平台代码，jsfiddle、codepen都是很不错的选择。</li>
</ul>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql创建只读用户</title>
    <url>/2022/07/04/develop/mysql%E5%88%9B%E5%BB%BA%E5%8F%AA%E8%AF%BB%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<p>创建只读用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式</span></span><br><span class="line">GRANT SELECT ON dbName.tableName TO &#x27;username&#x27;@&#x27;host&#x27; IDENTIFIED BY &quot;password&quot;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>例子，用户<code>readonly_user</code>可以在当前mysql的服务器，只读方式访问所有数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON *.* TO &#x27;readonly_user&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &quot;12345678&quot;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>分步创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;readonly_user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br><span class="line">GRANT SELECT ON *.* TO &#x27;readonly_user&#x27;@&#x27;%&#x27;; </span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo自定义404页面</title>
    <url>/2015/12/26/develop/hexo%E8%87%AA%E5%AE%9A%E4%B9%89404%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>要自定义hexo的404页面，只要根目录下只要个404.html页面就行了。创建404页面的方法同样适用于创建hexo所有自定义页面。</p>
<span id="more"></span>

<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>来自于知乎贴<a href="https://www.zhihu.com/question/21650209">https://www.zhihu.com/question/21650209</a>，直接在主题的source文件夹下面创建404.html页面。</p>
<ul>
<li>优点：基于主题的，简单，直接了当</li>
<li>缺点：页面内容只能是独立的，无法共享主题资源和数据，也是不好使用主题css、js以及loyout这些，只适合外链页</li>
</ul>
<p>如404页面为腾讯公益404页面。代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.qq.com/404/search_children.js&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;http://yourdomain.com&quot;</span> <span class="attr">homePageName</span>=<span class="string">&quot;回到主页&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>进入命令行，创建类型为page页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page 404</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在项目source目录为生成一个404/index.md的页面，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2015-12-26 09:16:44</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试一下，运行<code>hexo s</code>，打开<a href="http://localhost:4000/404/">http://localhost:4000/404/</a>看能否浏览，修改一下404.md：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2015-12-26 09:16:44</span><br><span class="line">comments: false #禁止评论</span><br><span class="line">permalink: 404.html #设为固定链接</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改这后404页面的链接变成了<a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a>，这样链接是正确了，但是页面用的是page的布局，怎么才能自定义？</p>
<blockquote>
<p>可以在404.md中添加html代码,css样式，折腾出你想要的样式</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 2015-12-26 09:16:44</span><br><span class="line">comments: false #禁止评论</span><br><span class="line">permalink: 404.html #设为固定链接</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #ddd&quot;</span>&gt;</span>not found<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<p>这样只能说，太僵硬……要自定义，用的是hexo的layout。每个page或者post都有个layout字段，404.md默认layout为page，修改404.md的layout字段为404：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: 404</span><br><span class="line">title: 404</span><br><span class="line">date: 2015-12-26 09:16:44</span><br><span class="line">comments: false #禁止评论</span><br><span class="line">permalink: 404.html #设为固定链接</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主题中每个页面都有个page.layout的变量，这个的值是我们在markdown文件中定义的layout字段，利用这个变量想怎么改都行了，方法很多，只介绍一种：</p>
<blockquote>
<p>_partial文件夹中新建个404.ejs文件，内容就是你自定义的；找到layout/layout.ejs文件，找到&lt;%- body %&gt;，修改成这样：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%if(page.layout==&#x27;404&#x27;)&#123;%&gt;</span><br><span class="line">	&lt;%- partial(&#x27;_partial/404&#x27;) %&gt;</span><br><span class="line">&lt;%&#125;else&#123;%&gt;</span><br><span class="line">&lt;%- body %&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据自己喜好，原理是判断page.layout变量的值，输出相应的内容。请看我的博客<a href="http://liukaijv.github.io/404.html">404页面</a>。</p>
]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins远程触发构建</title>
    <url>/2023/06/09/develop/jenkins%E8%BF%9C%E7%A8%8B%E8%A7%A6%E5%8F%91%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<p>jenkins远程触发构建的方法介绍</p>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>设置API Token，其它Basic Auth调用任务构建，此方式适用于脚本调用和代码调用</p>
<p>设置API Token</p>
<p>指定用户-&gt;用户页面-&gt;设置-&gt;API Token</p>
<p>curl调用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> jobName就是点进jenkins任务页面，地址栏url里的</span></span><br><span class="line">curl http://hostname/jobName/build -u userName:APIToken</span><br><span class="line"><span class="meta">#</span><span class="bash"> 带参数</span></span><br><span class="line">curl http://hostname/jobName/buildWithParameters -u userName:APIToken</span><br></pre></td></tr></table></figure>

<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>使用Build Authorization Token Root插件，适合webhook之类的</p>
<ul>
<li>安装Build Authorization Token Root插件</li>
<li>设置API Token</li>
<li>job页面，勾选“触发远程构建 (例如,使用脚本)”，身份验证令牌中填入API Token</li>
</ul>
<p>直接浏览器输入测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://hostname/buildByToken/build?job=jobName&amp;token=APIToken</span><br><span class="line">http://hostname/buildByToken/buildWithParameters?job=jobName&amp;token=APIToken</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2015/11/26/develop/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>摘自<a href="http://wowubuntu.com/markdown/">http://wowubuntu.com/markdown/</a>语法说明 (简体中文版)</p>
</blockquote>
<span id="more"></span>

<h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是 H1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 这是 H2</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 这是 H6</span></span><br></pre></td></tr></table></figure>

<h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="quote">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span></span><br><span class="line"><span class="quote">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line"><span class="quote">&gt; id sem consectetuer libero luctus adipiscing.</span></span><br></pre></td></tr></table></figure>

<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure>

<p>有序列表则使用数字接着一个英文句点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure>

<h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <pre> 和 <code> 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure>

<p>Markdown 会转换成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;这是一个普通段落：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;这是一个代码区块。</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<p>别一种方式用三个反引号包起：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">var foo = 1;	</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">同时可以指定语言：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;	</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 分隔线</span><br><span class="line"></span><br><span class="line">你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<hr>
<hr>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 链接</span><br><span class="line"></span><br><span class="line">Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</span><br><span class="line"></span><br><span class="line">不管是哪一种，链接文字都是用 [方括号] 来标记。</span><br><span class="line"></span><br><span class="line">要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>This is <a href="http://example.com/" title="Title">an example</a> inline link.</p>
<p><a href="http://example.net/">This link</a> has no title attribute.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>This is <a href="http://example.com/" title="Optional Title Here">an example</a> reference-style link.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 强调</span><br><span class="line"></span><br><span class="line">Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 代码</span><br><span class="line"></span><br><span class="line">如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Use the <code>printf()</code> function.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 图片</span><br><span class="line"></span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/path/to/img.jpg" alt="Alt text"></p>
<p><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">参考式的图片语法则长得像这样：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="http://example.com/" alt="Alt text" title="Optional Title Here"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>windows子系统目录位置</title>
    <url>/2022/02/08/develop/windows%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>打开我的电脑，在地址栏输入<code>\\wsl$</code>，确定之后就看到所有的子系统了</p>
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>安装的地址路径为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\用户\AppData\Local\Packages\对应的子系统\LocalState</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">C:\Users\用户\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>windows家庭版安装hyper-v</title>
    <url>/2022/02/07/develop/windows%E5%AE%B6%E5%BA%AD%E7%89%88%E5%AE%89%E8%A3%85hyper-v/</url>
    <content><![CDATA[<p>新建bat文件<code>hyper-v.bat</code>，内容为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line"></span><br><span class="line">dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line"></span><br><span class="line">for /f %%i in (&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br><span class="line"></span><br><span class="line">del hyper-v.txt</span><br><span class="line"></span><br><span class="line">Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure>

<p>以管理员身份执行<code>hyper-v.bat</code>，然后等待安装，需要确认的都选择<code>y</code></p>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh长时间保持不断开</title>
    <url>/2021/12/26/develop/ssh%E9%95%BF%E6%97%B6%E9%97%B4%E4%BF%9D%E6%8C%81%E4%B8%8D%E6%96%AD%E5%BC%80/</url>
    <content><![CDATA[<p>远程ssh连接服务器，默认长时间不用会自动断开，设置不自动断开方式有三种</p>
<h2 id="客户端连接加参数"><a href="#客户端连接加参数" class="headerlink" title="客户端连接加参数"></a>客户端连接加参数</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 相当于每隔120秒向服务器发送心跳</span></span><br><span class="line">ssh -o ServerAliveInterval=120 user@ip</span><br></pre></td></tr></table></figure>

<h2 id="客户端设置配置"><a href="#客户端设置配置" class="headerlink" title="客户端设置配置"></a>客户端设置配置</h2><p>如果ssh服务器信息放<code>~/.ssh/config</code>中的，设置<code>ServerAliveInterval</code>值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host alias </span><br><span class="line">    HostName ip</span><br><span class="line">    User root</span><br><span class="line">    ServerAliveInterval 120</span><br></pre></td></tr></table></figure>

<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>修改<code>sshd_config</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi vim /etc/ssh/sshd_config</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 发送心跳间隔</span></span></span><br><span class="line">ClientAliveInterval 120</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 最大发送次数</span></span></span><br><span class="line">ClientAliveCountMax 720</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl2和Proxifier兼容问题</title>
    <url>/2022/10/14/develop/wsl2%E5%92%8CProxifier%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>使用过<code>Proxifier</code>后，发现<code>wsl2</code>出问题了，打开子系统时提示<code>参考的对象类型不支持尝试的操作。</code>，搜了下网上的解决方法是通过下载<code>NoLsp.exe</code>解决</p>
<p>问题链接：<a href="https://github.com/microsoft/WSL/issues/4177#issuecomment-597736482">https://github.com/microsoft/WSL/issues/4177#issuecomment-597736482</a>，提供的用不了</p>
<p>这个里的可以用，<a href="https://github.com/dyingsu/nolsp">https://github.com/dyingsu/nolsp</a></p>
<p>下载之后，管理员打开<code>cmd</code>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NoLsp.exe C:\windows\system32\wsl.exe</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>管理员身份在<code>CMD</code>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在shell中执行一个字符串</title>
    <url>/2020/02/10/develop/%E5%9C%A8shell%E4%B8%AD%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>写shell脚本时经常会拼接一个字串,然后当成命令执行，用到的linux命令是<code>eval $&#123;str&#125;</code>或者<code>echo $&#123;str&#125; | sh</code>，例子如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">start=1</span><br><span class="line">amount=<span class="variable">$1</span></span><br><span class="line">raceId=<span class="variable">$2</span></span><br><span class="line">api_host=127.0.0.1:8080</span><br><span class="line">str=<span class="string">&quot;curl --location --request POST &#x27;http://<span class="variable">$&#123;api_host&#125;</span>/api/AddBuy&#x27;</span></span><br><span class="line"><span class="string">--header \&quot;&#x27;Content-Type&#x27;:&#x27;application/json&#x27;\&quot;</span></span><br><span class="line"><span class="string">--data-raw &#x27;&#123;</span></span><br><span class="line"><span class="string">    \&quot;PidStart\&quot;:<span class="variable">$start</span>,</span></span><br><span class="line"><span class="string">    \&quot;Amount\&quot;:<span class="variable">$&#123;amount&#125;</span>,</span></span><br><span class="line"><span class="string">    \&quot;RaceId\&quot;:<span class="variable">$&#123;raceId&#125;</span></span></span><br><span class="line"><span class="string">&#125;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str&#125;</span> | sh</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$&#123;str&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>如何查询指定时间范围内的日志</title>
    <url>/2022/09/27/develop/%E5%A6%82%E4%BD%95%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>搞代码的都离不开通过查看日志处理问题；服务器上记录的日志都比较大，不会把整个日志文件拿来分析，通常会截取时间范围内的日志来分析问题，介绍几种查询时间范围日志方法。</p>
<p>处理文件肯定是离不开linux三剑客grep、sed、awk的。</p>
<h2 id="演示截取2点到9点的日志"><a href="#演示截取2点到9点的日志" class="headerlink" title="演示截取2点到9点的日志"></a>演示截取2点到9点的日志</h2><p>测试日志文件<code>test.log</code>，模拟所有2点到11点日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T02:12:59+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T02:14:42+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T02:41:03+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T02:45:59+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T04:35:31+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T04:35:31+08:00&quot;,&quot;level&quot;:&quot;error&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T04:35:31+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T04:38:40+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T04:49:55+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:21:04+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:21:04+08:00&quot;,&quot;level&quot;:&quot;error&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:21:04+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:21:04+08:00&quot;,&quot;level&quot;:&quot;error&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:21:04+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:21:19+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:30:30+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:30:35+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:33:46+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T09:37:02+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:29:54+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:29:59+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:02+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:03+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:43+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:44+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:45+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:46+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:30:48+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T10:56:22+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T11:09:36+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2022-09-27T11:09:41+08:00&quot;,&quot;level&quot;:&quot;debug&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正则方式"><a href="#正则方式" class="headerlink" title="正则方式"></a>正则方式</h2><p>grep不支持范围，awk和sed支持范围，三个都支持正则匹配</p>
<span id="more"></span>

<p>grep </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;2022-09-27T0[2-9]&#x27; test.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 19条数据</span></span><br></pre></td></tr></table></figure>

<p>awk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;/2022-09-27T0[2-9]/&#x27; test.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 19条数据</span></span><br></pre></td></tr></table></figure>

<p>sed</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;/2022-09-27T0[2-9]/p&#x27; test.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 19条数据</span></span><br></pre></td></tr></table></figure>

<h2 id="范围方式"><a href="#范围方式" class="headerlink" title="范围方式"></a>范围方式</h2><p>范围是指匹配第一次出现到第二次出现之间的内容，所以查9点的应该写成截止10点，只会多出10点的一条数据</p>
<p>awk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;/2022-09-27T02/,/2022-09-27T10/&#x27; test.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 20条数据</span></span><br></pre></td></tr></table></figure>

<p>sed</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -n &#x27;/2022-09-27T02/,/2022-09-27T10/p&#x27; test.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 20条数据</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>log</tag>
        <tag>awk</tag>
        <tag>grep</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title>把github作为静态资源cdn</title>
    <url>/2015/05/27/develop/%E6%8A%8Agithub%E4%BD%9C%E4%B8%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90cdn/</url>
    <content><![CDATA[<p>博客是用hexo搭建的，没有上传图片的功能，于是想把图片都放github上。需要图片的时候<code>![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code>这样就可以插入了。</p>
<p>在github上创建仓库，名字自己取，以我自己的为例，仓库为static_cdn，克隆到本地：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:liukaijv/static_cdn.git</span><br><span class="line"><span class="comment"># 打开目录</span></span><br><span class="line">$ <span class="built_in">cd</span> static_cdn</span><br><span class="line"><span class="comment"># 新建images文件夹</span></span><br><span class="line">$ mikdir images</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>添加图片avatar_large.jpg到images文件夹，然后push到github。登录github网站，添加的图片链接为<code>https://github.com/liukaijv/static_cdn/blob/master/images/avatar_large.jpg</code>。把链接中的<strong>blob</strong>改成<strong>raw</strong>就可以显示图片了。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](https://github.com/liukaijv/static_cdn/raw/master/images/avatar_large.jpg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/liukaijv/static_cdn/raw/master/images/avatar_large.jpg" alt="我是放在github上的图片" title="我是放在github上的图片"></p>
<hr>
<p>github 静态资源链接是这样子的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://github.com/yourname/your-repository/raw/master/the-folder/xxx.xxx</span><br><span class="line"></span><br><span class="line"># 说明一下</span><br><span class="line">yourname         --- 你的帐号</span><br><span class="line">your-respository --- 你的 project 名</span><br><span class="line">images-folder    --- 你存放资源的文件夹，如果是直接放在 project 的项目根目录的話，就可以省略這個</span><br><span class="line">xxx.xxx          --- 你的资源名</span><br></pre></td></tr></table></figure>

<p>不光可以是图片，其它的也是，如<a href="https://github.com/liukaijv/static_cdn/raw/master/LICENSE">LICENSE文件</a>、<a href="https://github.com/liukaijv/static_cdn/raw/master/images/avatar_large.jpg">图片</a>等等。</p>
<blockquote>
<p>github是服务器在国外，访问慢，可以选择放七牛。<br>教程在<a href="http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/">http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>对git仓库进行清理</title>
    <url>/2022/09/15/develop/%E5%AF%B9git%E4%BB%93%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<p>git仓库使用很长一段时间后，因为提交次数多了<code>.git</code>目录会越来越大；导致构建检出<code>tag</code>时耗时特别长。</p>
<p>整理了清理git仓库方法</p>
<h2 id="使用bfg工具清理"><a href="#使用bfg工具清理" class="headerlink" title="使用bfg工具清理"></a>使用bfg工具清理</h2><p>下载地址：<a href="https://github.com/rtyley/bfg-repo-cleaner">https://github.com/rtyley/bfg-repo-cleaner</a></p>
<p>使用步骤：</p>
<p>下载bfg，是一个jar文件，需求安装<code>java</code>环境才能执行</p>
<p>清理命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清理&gt;10M的文件</span></span><br><span class="line">java -jar bfg-path/bfg.jar --strip-blobs-bigger-than 10M --no-blob-protection your-git-repo-path</span><br></pre></td></tr></table></figure>

<p>进入仓库目录，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd your-git-repo-path</span><br><span class="line">git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span><br></pre></td></tr></table></figure>

<p>漫长的等待过后，推送到远程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure>

<p>自已的项目可以像这样搞，如果是多人使用的仓库，最好是清理后迁移成一个新仓库，然后所有人重新clone</p>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>用户加入sudo列表</title>
    <url>/2022/01/06/develop/%E7%94%A8%E6%88%B7%E5%8A%A0%E5%85%A5sudo%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>新创建的用户，使用<code>sudo</code>切换到<code>root</code>时提示错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xxx is not in the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到`root`下</span></span><br><span class="line">su </span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑sudoers文件</span></span><br><span class="line">vi /etc/sudoers</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">username            ALL=(ALL)                ALL</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>配置免费ssl证书</title>
    <url>/2021/12/27/develop/%E9%85%8D%E7%BD%AE%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h2 id="安装acme-sh"><a href="#安装acme-sh" class="headerlink" title="安装acme.sh"></a>安装<code>acme.sh</code></h2><p>官方安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>

<p>安装之后会在目录下生成个<code>.acme.sh</code>目录</p>
<p>资源在github，经常下载失败，手动克隆仓库安装</p>
<p>把<code>https://github.com/acmesh-official/acme.sh</code>同步到gitee上，再克隆下来，执行下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git https://gitee.com/xxx/acme.sh.git</span><br><span class="line">cd acme.sh</span><br><span class="line">./acme.sh --install -m  my@example.com</span><br><span class="line">alias acme.sh=~/.acme.sh/acme.sh</span><br></pre></td></tr></table></figure>

<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh  --issue -d www.example.com  --webroot  /home/wwwroot/example.com/</span><br></pre></td></tr></table></figure>

<p>如果80端口只配置了一个站点，可以这样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> apache</span></span><br><span class="line">acme.sh  --issue -d www.example.com  --apache</span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx</span></span><br><span class="line">acme.sh  --issue -d www.example.com  --nginx</span><br></pre></td></tr></table></figure>

<h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>官方例子nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d www.example.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \</span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd     &quot;service apache2 force-reload&quot;</span><br></pre></td></tr></table></figure>

<p>官方例子apache</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d www.example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     &quot;service nginx force-reload&quot;</span><br></pre></td></tr></table></figure>

<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>拷贝到指定的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp  ~/.acme.sh/www.example.com/fullchain.cer /etc/nginx/ssl/www.example.com.cer</span><br><span class="line">cp ~/.acme.sh/www.example.com/www.example.com.key /etc/nginx/ssl/www.example.com.key</span><br></pre></td></tr></table></figure>

<p>修改nginx配置<code>/etc/nginx/conf.d/www.example.com.conf</code></p>
<ul>
<li>启用https</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen 443 ssl;</span><br><span class="line">listen [::]:443 ssl;</span><br></pre></td></tr></table></figure>

<ul>
<li>证书</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssl_certificate /etc/nginx/ssl/www.example.com.cer;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/www.example.com.key;</span><br></pre></td></tr></table></figure>

<ul>
<li>http跳转https</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name www.example.com;</span><br><span class="line">     return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>linux用户管理</title>
    <url>/2021/12/26/linux/linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>创建一个用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure>

<p>创建用户并创建用户目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -m username</span><br></pre></td></tr></table></figure>
<p>创建用户不创建用户目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -M username</span><br></pre></td></tr></table></figure>

<p>创建用户不用于登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -s /sbin/nologin</span><br></pre></td></tr></table></figure>

<p>创建用户不用于登录和不创建目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -s /sbin/nologin -M username</span><br></pre></td></tr></table></figure>

<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure>

<p>把用户目录也删掉</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel -r username</span><br></pre></td></tr></table></figure>

<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure>

<h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><p>创建组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd groupname</span><br></pre></td></tr></table></figure>

<p>删除组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd groupname</span><br></pre></td></tr></table></figure>

<p>用户加入组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -G groupname username</span><br></pre></td></tr></table></figure>

<p>用户加入组（并从原来组中移出）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -g groupname username</span><br></pre></td></tr></table></figure>

<p>用户移出用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpasswd -d username groupname</span><br></pre></td></tr></table></figure>

<h2 id="相关查看"><a href="#相关查看" class="headerlink" title="相关查看"></a>相关查看</h2><p>所有用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p>所有用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>shell中的使用map</title>
    <url>/2022/03/15/linux/shell%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8map/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>shell中map必须申明才能使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">declare -A userIds</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式一，item项目中间不需要逗号</span></span><br><span class="line">userIds=([&#x27;bar&#x27;]=&quot;1&quot; [&#x27;foo&#x27;]=&quot;2&quot;)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">userIds[&#x27;bar&#x27;]=&quot;1&quot;</span><br><span class="line">userIds[&#x27;foo&#x27;]=&quot;2&quot;</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出value</span></span><br><span class="line">echo &quot;$&#123;userIds[*]&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">echo &quot;$&#123;userIds[@]&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出key</span></span><br><span class="line">echo &quot;$&#123;!userIds[*]&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">echo &quot;$&#123;!userIds[@]&#125;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> bar foo</span></span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出key</span></span><br><span class="line">for key in &quot;$&#123;!userIds[@]&#125;&quot;; do</span><br><span class="line">    echo $key</span><br><span class="line">    echo $&#123;userIds[$key]&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出value</span></span><br><span class="line">for value in &quot;$&#123;userIds[@]&#125;&quot;; do</span><br><span class="line">    echo $value</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p><code>@</code>换成<code>*</code>效果一样</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>maven项目添加第三方jar库</title>
    <url>/2022/09/03/java/maven%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%BA%93/</url>
    <content><![CDATA[<p>第三方的sdk没在maven公共仓库里，需要下载jar集成到maven项目里</p>
<h2 id="把jar文件拷贝到项目里"><a href="#把jar文件拷贝到项目里" class="headerlink" title="把jar文件拷贝到项目里"></a>把jar文件拷贝到项目里</h2><p>在根目录或<code>resources</code>创建<code>lib</code>目录，把<code>jar</code>文件拷贝进去</p>
<h2 id="修改pom-xml文件，添加依赖"><a href="#修改pom-xml文件，添加依赖" class="headerlink" title="修改pom.xml文件，添加依赖"></a>修改<code>pom.xml</code>文件，添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opensdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/src/main/resources/lib/opensdk.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改spring-boot-maven-plugin"><a href="#修改spring-boot-maven-plugin" class="headerlink" title="修改spring-boot-maven-plugin"></a>修改<code>spring-boot-maven-plugin</code></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="刷新maven或者重新打开项目"><a href="#刷新maven或者重新打开项目" class="headerlink" title="刷新maven或者重新打开项目"></a>刷新maven或者重新打开项目</h2>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>清理过期日志文件</title>
    <url>/2022/10/13/linux/%E6%B8%85%E7%90%86%E8%BF%87%E6%9C%9F%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>清理过期日志文件的方法</p>
<h1 id="用find-exec"><a href="#用find-exec" class="headerlink" title="用find+exec"></a>用find+exec</h1><p>用<code>find</code>找出指定时间的文件，配合<code>exec</code>执行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -mtime 指定文件修改时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如清理2天前的</span></span><br><span class="line">find log_dir -mtime +2 -type f -name &quot;*.log&quot; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h2 id="用tmpwatch"><a href="#用tmpwatch" class="headerlink" title="用tmpwatch"></a>用tmpwatch</h2><p>使用<code>tmpwatch</code>清理目录，文件最后一次被访问的时间，单位是小时；这个命令只适全整个目录下都是日志的情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如清理2天前的</span></span><br><span class="line">tmpwatch -mdfv  48 log_dir </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot跨域设置</title>
    <url>/2022/12/01/java/springboot%E8%B7%A8%E5%9F%9F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>springboot提供了两种跨域方式</p>
<ul>
<li>实现<code>WebMvcConfigurer</code>接口的<code>addCorsMappings</code>方法</li>
<li><code>FilterRegistrationBean</code>添加<code>CorsFilter</code>类</li>
</ul>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        FilterRegistrationBean&lt;CorsFilter&gt; bean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(<span class="keyword">new</span> CorsFilter(source));</span><br><span class="line">        bean.setName(<span class="string">&quot;corsFilter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>分使用场景</p>
<p>假如你用了<code>servlet</code>的<code>filter</code>，并<code>filter</code>前提返回了请求结果，用<code>FilterRegistrationBean</code>方式才行，因为此时请求还没到<code>WebMvcConfigurer</code>处理就已经返回了。</p>
<p>没这种情况两者行为一样。</p>
<h2 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h2><p>跨域无非就是在<code>header</code>里写入控制跨域相关的字段信息，自己实现<code>Filter</code>或者<code>Interceptor</code>就行了。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下hadoop配置</title>
    <url>/2022/06/17/java/windows%E4%B8%8Bhadoop%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>hadoop不支持windows，做为开发环境通过配置是可以使用部分功能的</p>
<h2 id="下载hadoop"><a href="#下载hadoop" class="headerlink" title="下载hadoop"></a>下载hadoop</h2><p>下载指定版本<a href="https://archive.apache.org/dist/hadoop/common/">https://archive.apache.org/dist/hadoop/common/</a>，下载linux使用的<code>xxx.tar.gz</code>，解压到指定目录</p>
<p>解压过程中会提示错误，看提示信息是文件链接的问题，不用管它。</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>环境变量里新增一条记录：</p>
<p>变量名：HADDOOP_HOME<br>变量值：D:\hadoop-2.8.1（解压目录）</p>
<p>把bin目录添加到PATH</p>
<p>也是就<code>%HADDOOP_HOME%\bin</code></p>
<h3 id="java安装"><a href="#java安装" class="headerlink" title="java安装"></a>java安装</h3><p>如果没有java去安装java</p>
<h2 id="安装winutils"><a href="#安装winutils" class="headerlink" title="安装winutils"></a>安装winutils</h2><p>windows下需要安装这个东西，下载地是<a href="https://github.com/cdarlint/winutils">https://github.com/cdarlint/winutils</a> ，找到对应的版本下载之后把所有文件放hadoop的bin目录下就行了</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>命令行运行下<code>hadoop</code>，没提示错误就说明成功了</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>laravel处理跨域请求</title>
    <url>/2016/05/29/php/laravel%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>写webapi总离开不跨域问题，总结下自己在做laravel开发的处理跨域请求方案。</p>
<blockquote>
<p>推荐使用<a href="https://github.com/dingo/api">dingo/api</a>扩展包</p>
</blockquote>
<h2 id="1、用laravel中间件，基于CORS"><a href="#1、用laravel中间件，基于CORS" class="headerlink" title="1、用laravel中间件，基于CORS"></a>1、用laravel中间件，基于<a href="https://www.w3.org/TR/cors/#access-control-allow-methods-response-header">CORS</a></h2><p>创建中间件CrossDomainMiddleware.php，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrossDomainMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;         </span><br><span class="line">        <span class="variable">$response</span> =  <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">        <span class="variable">$response</span>-&gt;header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        <span class="variable">$response</span>-&gt;header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Origin, Content-Type, Cookie, Accept&#x27;</span>);</span><br><span class="line">        <span class="variable">$response</span>-&gt;header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST, PATCH, PUT, OPTIONS&#x27;</span>);</span><br><span class="line">        <span class="variable">$response</span>-&gt;header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在Kernel.php中注册中间件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span> <span class="title">as</span> <span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The application&#x27;s global HTTP middleware stack.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * These middleware are run during every request to your application.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$middleware</span> = [</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The application&#x27;s route middleware groups.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$middlewareGroups</span> = [</span><br><span class="line">        <span class="string">&#x27;web&#x27;</span> =&gt; [</span><br><span class="line">            \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line">            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line">            \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line">            \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line">            \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;api&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;throttle:60,1&#x27;</span>,</span><br><span class="line">            \App\Http\Middleware\CrossDomainMiddleware::class,        </span><br><span class="line">        ]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The application&#x27;s route middleware.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * These middleware may be assigned to groups or used individually.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$routeMiddleware</span> = [</span><br><span class="line">        <span class="string">&#x27;auth&#x27;</span> =&gt; \App\Http\Middleware\Authenticate::class,</span><br><span class="line">        <span class="string">&#x27;auth.basic&#x27;</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">        <span class="string">&#x27;auth.basic.once&#x27;</span> =&gt; \App\Http\Middleware\AuthenticateOnceWithBasicAuth::class,</span><br><span class="line">        <span class="string">&#x27;guest&#x27;</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">        <span class="string">&#x27;throttle&#x27;</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,     </span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、在nginx-conf中配置，基于w3c-Cross-Origin-Resource-Sharing"><a href="#2、在nginx-conf中配置，基于w3c-Cross-Origin-Resource-Sharing" class="headerlink" title="2、在nginx.conf中配置，基于w3c-Cross-Origin Resource Sharing"></a>2、在nginx.conf中配置，基于<a href="https://www.w3.org/TR/cors/#access-control-allow-methods-response-header">w3c-Cross-Origin Resource Sharing</a></h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">http</span> &#123;</span><br><span class="line">  <span class="string">......</span></span><br><span class="line">  <span class="string">add_header</span> <span class="string">Access-Control-Allow-Origin</span> <span class="string">*;</span></span><br><span class="line">  <span class="string">add_header</span> <span class="string">Access-Control-Allow-Headers</span> <span class="string">X-Requested-With;</span></span><br><span class="line">  <span class="string">add_header</span> <span class="string">Access-Control-Allow-Methods</span> <span class="string">GET</span>,<span class="string">POST</span>,<span class="string">OPTIONS;</span></span><br><span class="line">  <span class="string">......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、nginx的反向代理"><a href="#3、nginx的反向代理" class="headerlink" title="3、nginx的反向代理"></a>3、nginx的反向代理</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">serve</span> &#123;</span><br><span class="line">    <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:3000;</span>    </span><br><span class="line">    <span class="string">keepalive</span> <span class="number">64</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">Host</span>  <span class="string">$http_host;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">X-Nginx-Proxy</span> <span class="literal">true</span><span class="string">;</span></span><br><span class="line">        <span class="string">proxy_set_header</span> <span class="string">Connection</span> <span class="string">&quot;&quot;</span><span class="string">;</span></span><br><span class="line">        <span class="string">proxy_pass</span>      <span class="string">http://serve;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>显示上传到laravel的storage目录中的图片</title>
    <url>/2016/10/29/php/%E6%98%BE%E7%A4%BA%E4%B8%8A%E4%BC%A0%E5%88%B0laravel%E7%9A%84storage%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>Laravel提供了强大文件系统，开发文件管理非常方便。默认情况下web只能访问<code>public</code>公共磁盘目录。</p>
<h2 id="访问storage下任意图片"><a href="#访问storage下任意图片" class="headerlink" title="访问storage下任意图片"></a>访问storage下任意图片</h2><p>如果图片不是放在<code>storage</code>公共磁盘中，可以定义一个用于访问图片的路由，如下：</p>
<p>routes/web.php定义路由：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file manager</span></span><br><span class="line">Route::group([<span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;filemanager&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    Route::get(<span class="string">&#x27;show&#x27;</span>, <span class="string">&#x27;FileManageController@get&#x27;</span>)-&gt;name(<span class="string">&#x27;filemanager.show&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>FileManageController.php中定义action：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Request $request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$request</span>-&gt;get(<span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="variable">$file</span> = Storage::get(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">return</span> response(<span class="variable">$file</span>, <span class="number">200</span>)-&gt;header(<span class="string">&#x27;Content-Type&#x27;</span>, Storage::mimeType(<span class="variable">$filename</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view里的图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;route(&#x27;filemanager.show&#x27;,[&#x27;filename&#x27;=&gt;$image[&#x27;name&#x27;]])&#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="公共磁盘图片访问"><a href="#公共磁盘图片访问" class="headerlink" title="公共磁盘图片访问"></a>公共磁盘图片访问</h2><p>public 磁盘用于存储可以被公开访问的文件，默认情况下， public 磁盘使用 local 驱动并将文件存储在<code>storage/app/public</code> ，要让这些文件可以通过web访问到，需要创建一个软链 <code>public/storage</code> 指向 <code>storage/app/public</code> 。</p>
<p>创建这个软链，可以使用Artisan命令 storage:link ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan storage:link</span><br></pre></td></tr></table></figure>

<p>图片被存储并且软链已经被创建的情况下，就可以使用辅助函数<code>asset</code>创建一个指向该图片的URL：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;asset(&#x27;storage/picture.png&#x27;)&#125;&#125;&quot;</span>&gt;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoose使用中查不出定义的virtual字段</title>
    <url>/2016/04/29/nodejs/mongoose%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%9F%A5%E4%B8%8D%E5%87%BA%E5%AE%9A%E4%B9%89%E7%9A%84virtual%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p>定义了指定为virtual属性的post_count字段统计文章数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// model</span></span><br><span class="line"><span class="keyword">var</span> TagSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">	<span class="attr">name</span>:  <span class="built_in">String</span>,</span><br><span class="line">	<span class="attr">slug</span>: <span class="built_in">String</span>,</span><br><span class="line">	<span class="attr">posts</span>: [&#123; <span class="attr">type</span>:Schema.ObjectId, <span class="attr">ref</span>:<span class="string">&quot;Post&quot;</span> &#125;],</span><br><span class="line">	<span class="attr">created_at</span>: &#123;<span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// virtual</span></span><br><span class="line">TagSchema.virtual(<span class="string">&#x27;post_count&#x27;</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.posts ? <span class="built_in">this</span>.posts.length : <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用find查询的时候居然查不出post_count出来。查看手册后是因为document 对象的toJSON和toObject方法里面 默认将virtual 属性排除了。 原文是这样的：</p>
<blockquote>
<p>Note that if the resulting record is converted to an object or JSON, virtuals are not included by default. Pass virtuals : true to either toObject() or to toJSON() to have them returned.</p>
</blockquote>
<p>需要对Schama做下面的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">TagSchema.set(<span class="string">&#x27;toJSON&#x27;</span>, &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">TagSchema.set(<span class="string">&#x27;toObject&#x27;</span>, &#123; <span class="attr">virtuals</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>mongoose</tag>
      </tags>
  </entry>
  <entry>
    <title>php函数array_chunk的妙用</title>
    <url>/2014/12/27/php/php%E5%87%BD%E6%95%B0array_chunk%E7%9A%84%E5%A6%99%E7%94%A8/</url>
    <content><![CDATA[<p>如果你想输出这么一个列表你会怎么做呢？</p>
<p>数据：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>,<span class="string">&quot;Honda&quot;</span>,<span class="string">&quot;Mercedes&quot;</span>,<span class="string">&quot;Opel&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>最终结果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>BMW<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Toyota<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Honda<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Mercedes<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Opel<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>以前我一直这样做：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>,<span class="string">&quot;Honda&quot;</span>,<span class="string">&quot;Mercedes&quot;</span>,<span class="string">&quot;Opel&quot;</span>);</span><br><span class="line"><span class="variable">$html</span> = <span class="string">&#x27;&lt;section class=&quot;list&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$cars</span> <span class="keyword">as</span> <span class="variable">$index</span>=&gt;<span class="variable">$car</span>)&#123;	</span><br><span class="line">	<span class="variable">$the_br</span> = (<span class="variable">$index</span> + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">&#x27;&lt;br&gt;&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="variable">$html</span> .= <span class="string">&#x27;&lt;div&gt;&#x27;</span> . <span class="variable">$car</span> . <span class="string">&#x27;&lt;/div&gt;&#x27;</span> . <span class="variable">$the_br</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;/section&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一直在纠纷里面那个判断，使用array_chunk()函数就不在费脑细胞了。array_chunk()版本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>,<span class="string">&quot;Honda&quot;</span>,<span class="string">&quot;Mercedes&quot;</span>,<span class="string">&quot;Opel&quot;</span>);</span><br><span class="line"><span class="variable">$html</span> = <span class="string">&#x27;&lt;section class=&quot;list&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(array_chunk(<span class="variable">$cars</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="variable">$split_car</span>)&#123;</span><br><span class="line">	<span class="keyword">foreach</span>(<span class="variable">$split_car</span> <span class="keyword">as</span> <span class="variable">$car</span>)&#123;</span><br><span class="line">		<span class="variable">$html</span> .= <span class="string">&#x27;&lt;div&gt;&#x27;</span>. <span class="variable">$car</span> . <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$html</span> .= <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;/section&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="array-chunk函数介绍"><a href="#array-chunk函数介绍" class="headerlink" title="array_chunk函数介绍"></a>array_chunk函数介绍</h2><p>array_chunk() 函数把数组分割为新的数组块。语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">array_chunk(<span class="keyword">array</span>, size, preserve_key);</span><br></pre></td></tr></table></figure>

<p>其中每个数组的单元数目由 size 参数决定。最后一个数组的单元数目可能会少几个。</p>
<p>可选参数 preserve_key 是一个布尔值，它指定新数组的元素是否有和原数组相同的键（用于关联数组），还是从 0 开始的新数字键（用于索引数组）。默认是分配新的键。</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>,<span class="string">&quot;Honda&quot;</span>,<span class="string">&quot;Mercedes&quot;</span>,<span class="string">&quot;Opel&quot;</span>);</span><br><span class="line">print_r(array_chunk(<span class="variable">$cars</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">   [0] =&gt; Array</span></span><br><span class="line"><span class="comment">       (</span></span><br><span class="line"><span class="comment">           [0] =&gt; Volvo</span></span><br><span class="line"><span class="comment">           [1] =&gt; BMW</span></span><br><span class="line"><span class="comment">       )</span></span><br><span class="line"><span class="comment">   [1] =&gt; Array</span></span><br><span class="line"><span class="comment">       (</span></span><br><span class="line"><span class="comment">           [0] =&gt; Toyota</span></span><br><span class="line"><span class="comment">           [1] =&gt; Honda</span></span><br><span class="line"><span class="comment">       )</span></span><br><span class="line"><span class="comment">   [2] =&gt; Array</span></span><br><span class="line"><span class="comment">       (</span></span><br><span class="line"><span class="comment">           [0] =&gt; Mercedes</span></span><br><span class="line"><span class="comment">           [1] =&gt; Opel</span></span><br><span class="line"><span class="comment">       )</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise和Deferred的用法对比</title>
    <url>/2016/07/18/frontend/Promise%E5%92%8CDeferred%E7%9A%84%E7%94%A8%E6%B3%95%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>ES6原生提供了Promise对象，高版本的nodejs可以直接使用，服务器端的开发中借住babel工具也可以使用，但是如果直接用到浏览器中，兼容性还是个问题。试下了最新的firefox和chorme浏览器都支持了，为了安全还是老老实实用jquery提供的Deferred对象吧。Promise能实现的功能$.Deferred也能实现。</p>
<span id="more"></span>

<h2 id="原生Promise"><a href="#原生Promise" class="headerlink" title="原生Promise"></a>原生Promise</h2><p>废话就不多说了，直接上api：</p>
<ul>
<li>Promise.resolve()</li>
<li>Promise.reject()</li>
<li>Promise.all()</li>
<li>Promise.then()</li>
<li>Promise.catch()</li>
<li>Promise.race() // jQuery.Deferred没找到对应的</li>
</ul>
<h2 id="jQuery-Deferred"><a href="#jQuery-Deferred" class="headerlink" title="jQuery.Deferred"></a>jQuery.Deferred</h2><p>对应的api有：</p>
<ul>
<li>deferred.resolve() =&gt; Promise.resolve()</li>
<li>deferred.reject() =&gt; Promise.reject()</li>
<li>jQuery.when() =&gt; Promise.all()</li>
<li>deferred.then() =&gt; Promise.then()</li>
<li>deferred.fail() =&gt; Promise.catch()</li>
</ul>
<h2 id="对比deferred-resolve和Promise-resolve的例子"><a href="#对比deferred-resolve和Promise-resolve的例子" class="headerlink" title="对比deferred.resolve和Promise.resolve的例子"></a>对比deferred.resolve和Promise.resolve的例子</h2><p>两者resolve和then的用法都一样</p>
<p>原生Promise</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> task = <span class="function">() =&gt;</span> &#123;   </span><br><span class="line">      resolve(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(task, <span class="number">5000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>jQuery版</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $.Deferred(<span class="function">(<span class="params">deferred</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> task = <span class="function">() =&gt;</span> &#123;   </span><br><span class="line">      deferred.resolve(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(task, <span class="number">5000</span>);</span><br><span class="line">  &#125;).promise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="对比deferred-fail和Promise-catch的例子"><a href="#对比deferred-fail和Promise-catch的例子" class="headerlink" title="对比deferred.fail和Promise.catch的例子"></a>对比deferred.fail和Promise.catch的例子</h2><p>两个用法差不多</p>
<p>原生Promise</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;).catch (<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line">wait().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>jQuery版</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $.Deferred(<span class="function">(<span class="params">deferred</span>) =&gt;</span> &#123;</span><br><span class="line">    deferred.reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;).promise();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;).fail(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line">wait().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="对比Promise-all和jQuery-when的例子"><a href="#对比Promise-all和jQuery-when的例子" class="headerlink" title="对比Promise.all和jQuery.when的例子"></a>对比Promise.all和jQuery.when的例子</h2><p>这两个区别是传入参数和返回值都不同，jQuery.when参数为单个deferred函数jQuery.when(deferred1,  deferred2, deferred3)；Promise.all参数为promise数组，Promise.all([promise1, promise2, promise3])。<br>Promise返回结果为数组，$.when返回结果和参数对应。</p>
<p>原生Promise</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// [&#x27;promise1&#x27;, &#x27;promise2&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>jQuery版</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deferred1 = $.Deferred(<span class="function">(<span class="params">deferred</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        deferred.resolve(<span class="string">&quot;deferred1&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> deferred2 = $.Deferred( <span class="function">(<span class="params">deferred</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        deferred.resolve(<span class="string">&quot;deferred2&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.when.(deferred1, deferred2).then(<span class="function">(<span class="params">result1, result2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result1, result2); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="实际开发中特殊情况填坑"><a href="#实际开发中特殊情况填坑" class="headerlink" title="实际开发中特殊情况填坑"></a>实际开发中特殊情况填坑</h2><p>根据在实际开发的经验，参数为[promise1, promise2, promise3]这种方式的更方便，某些情况$.when实现起来很悲剧。思考下面的多文件上传时$.Deferred怎么实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file input上传的多个文件</span></span><br><span class="line"><span class="keyword">var</span> files = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> handleUpload = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;	</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// ajax上传文件到服务器</span></span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	        resolve(file+<span class="string">&quot; file uploaded&quot;</span>);</span><br><span class="line">	    &#125;, <span class="number">1000</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组装成数组</span></span><br><span class="line"><span class="keyword">var</span> promiseArr = <span class="built_in">Array</span>.prototype.slice.call(files, <span class="number">0</span>).map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> handleUpload(file);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promiseArr).then(<span class="function">(<span class="params">allFiles</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要用到上传成功后的所有文件</span></span><br><span class="line">  <span class="built_in">console</span>.log(allFiles); <span class="comment">// [&quot;1 file uploaded&quot;, &quot;2 file uploaded&quot;, &quot;3 file uploaded&quot;]</span></span><br><span class="line">&#125;).catch (<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>用$.Deferred也不麻烦，$.Deferred版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写的都是假数据</span></span><br><span class="line"><span class="comment">// file input上传的多个文件</span></span><br><span class="line"><span class="keyword">var</span> files = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> handleUpload = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;	</span><br><span class="line">	<span class="keyword">return</span> $.Deferred(<span class="function">(<span class="params">deferred</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// ajax上传到服务器</span></span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	        deferred.resolve(file+<span class="string">&quot; file uploaded&quot;</span>);</span><br><span class="line">	    &#125;, <span class="number">1000</span>);</span><br><span class="line">	&#125;).promise();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装成数组</span></span><br><span class="line"><span class="keyword">var</span> promiseArr = <span class="built_in">Array</span>.prototype.slice.call(files, <span class="number">0</span>).map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> handleUpload(file);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.when.apply($, promiseArr).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 这里不能写箭头函数了，写了arguments is not defined</span></span><br><span class="line">  <span class="comment">// 要用到上传成功后的所有文件</span></span><br><span class="line">  <span class="keyword">var</span> allFiles = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(allFiles); <span class="comment">// [&quot;1 file uploaded&quot;, &quot;2 file uploaded&quot;, &quot;3 file uploaded&quot;]</span></span><br><span class="line">&#125;).fail (<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><blockquote>
<p><a href="http://api.jquery.com/category/deferred-object/">jQuery Deferred 文档</a><br><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html">阮老师的 jQuery的deferred对象详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中的隐式类型转换</title>
    <url>/2015/10/04/frontend/javascript%E4%B8%AD%E7%9A%84%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>在Javascript 中，只有在一些极少数情况下才会因为类型错误而抛出一个异常，大多数情况会偷偷的把类型转换了，这就是所谓的“隐式类型转换”，js中的基本类型有：string、number、boolean、object、symbol、undefined、null，其中object为引用类型。不同类型的变量比较或运算时会产生隐式类型转换。</p>
<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p>+号可以当算术运算符也能当连字符号，使用+情况为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 只要有一个类型为string，另一个也会转为string</span><br><span class="line">console.log(1+&#x27;1&#x27;) // &#x27;11&#x27;</span><br><span class="line">console.log(&#x27;1&#x27;+1) // &#x27;11&#x27;</span><br><span class="line">console.log(&#x27;1&#x27;+true) // &#x27;11&#x27;</span><br><span class="line">// number和boolean时，boolean转为number</span><br><span class="line">console.log(1+true) // &#x27;2&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>减法，乘，除，大于，小于运算时两边都会转成number，其中一个不能转为number即为NaN时，结果为NaN。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(2-&#x27;1&#x27;) // 1</span><br><span class="line">console.log(&#x27;2&#x27;-&#x27;1&#x27;) // 1</span><br><span class="line">console.log(&#x27;2&#x27;-true) // 1</span><br><span class="line">console.log(&#x27;2&#x27;-true) // 1</span><br><span class="line">console.log(&#x27;2&#x27;-&#x27;a&#x27;) // NaN</span><br><span class="line">console.log(2-&#x27;a&#x27;) // NaN</span><br><span class="line">console.log(2*&#x27;a&#x27;) // NaN</span><br><span class="line">console.log(2*true) // 2</span><br></pre></td></tr></table></figure>

<h2 id="if中"><a href="#if中" class="headerlink" title="if中"></a>if中</h2><p>大多数的值都会转换成true，只有少数的是false，他们分别是：false, 0, -0, “”, NaN, null, undefined。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// x为false, 0, -0, &quot;&quot;, NaN, null, undefined时才输出</span><br><span class="line">var x = 1;</span><br><span class="line">if(x)&#123;</span><br><span class="line">	console.log(&#x27;hello&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两个-时"><a href="#两个-时" class="headerlink" title="两个==时"></a>两个==时</h2><p>两者中有布尔值(Boolean)，会把Boolean先转换为对应的Number，即0和1；双方中有一方为Number，一方为 String时，会把String转换为数字；双方中有一方为Boolean，一方为 String时，则会先将双方转换为数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(1==true)//true</span><br><span class="line">console.log(1==&#x27;1&#x27;)//true</span><br><span class="line">console.log(1==&#x27;a&#x27;)//false</span><br><span class="line">console.log(true==&#x27;a&#x27;)//false</span><br><span class="line">console.log(true==&#x27;1&#x27;)//true</span><br></pre></td></tr></table></figure>

<h2 id="amp-amp-和"><a href="#amp-amp-和" class="headerlink" title="&amp;&amp;和||"></a>&amp;&amp;和||</h2><p>会先转成boolean，&amp;&amp;遇到false返回当前，无刚返回下一个；||遇到真就返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(11&amp;&amp;&#x27;11&#x27;)// &#x27;11&#x27;</span><br><span class="line">console.log(&#x27;0&#x27;&amp;&amp;&#x27;11&#x27;)// &#x27;11&#x27;</span><br><span class="line">console.log(&#x27;&#x27;&amp;&amp;&#x27;11&#x27;)// &#x27;&#x27;</span><br><span class="line">console.log(&#x27;&#x27;||&#x27;11&#x27;)// &#x27;11&#x27;</span><br><span class="line">console.log(&#x27;22&#x27;||&#x27;11&#x27;)// &#x27;22&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="引用类型参与时"><a href="#引用类型参与时" class="headerlink" title="引用类型参与时"></a>引用类型参与时</h2><p>引用类型和基本类型的比较就相对复杂一些，先要把引用类型转成基本类型。引用类型转布尔全是true，引用类型转数字或者字符串就要用valueOf()或者toString()。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(1+[]) //1</span><br><span class="line">console.log(0==[]) // true</span><br><span class="line">console.log(0+[]) // 0</span><br><span class="line">console.log(&#x27;0&#x27;+[]) // &#x27;0&#x27;</span><br><span class="line">// 与对象默认valueOf和toString都是object Object</span><br><span class="line">// var a = &#123;&#125;;console.log(a.toString()==a.valueOf());//true</span><br><span class="line">console.log(&#x27;0&#x27;+&#123;&#125;) // &#x27;0[object Object]&#x27;</span><br><span class="line">console.log(0+&#123;&#125;) // &#x27;0[object Object]&#x27;</span><br><span class="line">// 实际上是先优先valueOf</span><br><span class="line">console.log(1+&#123;toString:function()&#123;return &#x27;1&#x27;&#125;,valueOf:function()&#123;return 1&#125;&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>javascript函数作为变量传递</title>
    <url>/2015/10/29/frontend/javascript%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>js中当函数不加括号时可以把函数当成值传递。</p>
<p>无参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br></pre></td></tr></table></figure>

<p>有参时需要用一个匿名函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar =  <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">	foo(arg1, arg2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中创建对象的几种方式</title>
    <url>/2015/08/04/frontend/javascript%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>javascript中没有类，可以用一些变通的方法模拟出来，整理的几种创建类的方法。</p>
<h2 id="工厂方式"><a href="#工厂方式" class="headerlink" title="工厂方式"></a>工厂方式</h2><p>缺点是不能实现私有属性和私有方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  Obj.name = <span class="string">&#x27;attr name&#x27;</span>;</span><br><span class="line">  Obj.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;method eat&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.eat());</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="构造函数法"><a href="#构造函数法" class="headerlink" title="构造函数法"></a>构造函数法</h2><p>与工厂方式相比，使用构造函数方式创建对象，无需再函数内部重建创建对象，而使用this指代，并而函数无需明确return。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = <span class="string">&#x27;attr jack&#x27;</span>;</span><br><span class="line">	<span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;method eat&#x27;</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.eat());</span><br></pre></td></tr></table></figure>

<h2 id="原型方式"><a href="#原型方式" class="headerlink" title="原型方式"></a>原型方式</h2><p>把属性和方法的定义放到prototype上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;attr name&#x27;</span>;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;method eat&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.eat());</span><br></pre></td></tr></table></figure>

<h2 id="构造函数-原型混合方式"><a href="#构造函数-原型混合方式" class="headerlink" title="构造函数+原型混合方式"></a>构造函数+原型混合方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = <span class="string">&#x27;attr name&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;method eat&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.eat());</span><br></pre></td></tr></table></figure>

<h2 id="Object-create-法"><a href="#Object-create-法" class="headerlink" title="Object.create()法"></a>Object.create()法</h2><p>Es6的一个新的方法Object.create()，直接返回一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;attr name&#x27;</span>,</span><br><span class="line">  <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">&#x27;method eat&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(Person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.eat());</span><br></pre></td></tr></table></figure>

<p>老式浏览器模拟Object.create()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点是不能实现私有属性和私有方法，实例对象之间也不能共享数据。</p>
<h2 id="极简主义法"><a href="#极简主义法" class="headerlink" title="极简主义法"></a>极简主义法</h2><p>荷兰程序员Gabor de Mooij提出了一种比Object.create()更好的新方法，他称这种方法为”极简主义法”（minimalist approach）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  <span class="attr">createNew</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _person = &#123;&#125;;</span><br><span class="line">    _person.name = <span class="string">&#x27;attr name&#x27;</span>;</span><br><span class="line">    _person.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;method eat&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _person;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = Person.createNew();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.eat());</span><br></pre></td></tr></table></figure>

<p>这种方法实现继承、私有属性和私有方法、数据共享也方便。</p>
<blockquote>
<p>参考和引用 <a href="http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html">Javascript定义类（class）的三种方法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>javascrit常见排序算法</title>
    <url>/2015/01/03/frontend/javascrit%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>总结一下javascrit常见排序算法。</p>
<h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<span id="more"></span>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul>
<li>比较相邻元素，如果第一个比第二个大，就交换它们</li>
<li>对每一对相邻元素作同样工作，从第一对到结尾的最后一对，这样在最后的元素应该会是最大的数</li>
<li>针对所有元素重复以上步骤，最后一个除外</li>
<li>重复步骤1-3，直到排序完成</li>
</ul>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; (len - <span class="number">1</span> - i); j++) &#123;</span><br><span class="line">      <span class="comment">// 相邻元素比较</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 元素交换</span></span><br><span class="line">        <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">44</span>,</span><br><span class="line">  <span class="number">38</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">47</span>,</span><br><span class="line">  <span class="number">15</span>,</span><br><span class="line">  <span class="number">36</span>,</span><br><span class="line">  <span class="number">26</span>,</span><br><span class="line">  <span class="number">27</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">46</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">19</span>,</span><br><span class="line">  <span class="number">50</span>,</span><br><span class="line">  <span class="number">48</span></span><br><span class="line">];</span><br><span class="line">bubbleSort(arr);</span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>

<h2 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区</li>
<li>n-1趟结束，数组有序化了</li>
</ul>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">var</span> minIndex,</span><br><span class="line">  temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i];</span><br><span class="line">    arr[i] = arr[minIndex];</span><br><span class="line">    arr[minIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">44</span>,</span><br><span class="line">  <span class="number">38</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">47</span>,</span><br><span class="line">  <span class="number">15</span>,</span><br><span class="line">  <span class="number">36</span>,</span><br><span class="line">  <span class="number">26</span>,</span><br><span class="line">  <span class="number">27</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">46</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">19</span>,</span><br><span class="line">  <span class="number">50</span>,</span><br><span class="line">  <span class="number">48</span></span><br><span class="line">];</span><br><span class="line">selectionSort(arr);</span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。</li>
</ul>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = arr[i];</span><br><span class="line">    <span class="keyword">var</span> j = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">      arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">44</span>,</span><br><span class="line">  <span class="number">38</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">47</span>,</span><br><span class="line">  <span class="number">15</span>,</span><br><span class="line">  <span class="number">36</span>,</span><br><span class="line">  <span class="number">26</span>,</span><br><span class="line">  <span class="number">27</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">46</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">19</span>,</span><br><span class="line">  <span class="number">50</span>,</span><br><span class="line">  <span class="number">48</span></span><br><span class="line">];</span><br><span class="line">insertionSort(arr);</span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>

<h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<p>代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>) [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> left = [</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> right = [</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  <span class="number">3</span>,</span><br><span class="line">  <span class="number">44</span>,</span><br><span class="line">  <span class="number">38</span>,</span><br><span class="line">  <span class="number">5</span>,</span><br><span class="line">  <span class="number">47</span>,</span><br><span class="line">  <span class="number">15</span>,</span><br><span class="line">  <span class="number">36</span>,</span><br><span class="line">  <span class="number">26</span>,</span><br><span class="line">  <span class="number">27</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">46</span>,</span><br><span class="line">  <span class="number">4</span>,</span><br><span class="line">  <span class="number">19</span>,</span><br><span class="line">  <span class="number">50</span>,</span><br><span class="line">  <span class="number">48</span></span><br><span class="line">];</span><br><span class="line">quickSort(arr);</span><br><span class="line"><span class="comment">// [2, 3, 4, 5, 15, 19, 26, 27, 36, 38, 44, 46, 47, 48, 50]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>js验证只能输入数字</title>
    <url>/2015/02/27/frontend/js%E9%AA%8C%E8%AF%81%E5%8F%AA%E8%83%BD%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<p>js验证只能输入数字函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseNumber</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 替换非数字值</span></span><br><span class="line">  value = value.replace(<span class="regexp">/[^\d.]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 替换第一位为.</span></span><br><span class="line">  value = value.replace(<span class="regexp">/^\./g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 替换最后一位为.</span></span><br><span class="line">  value = value.replace(<span class="regexp">/\.$/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="comment">// 替换连续.+</span></span><br><span class="line">  value = value.replace(<span class="regexp">/\.&#123;2,&#125;/g</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="comment">// .号前只能有一个0</span></span><br><span class="line">  value = value.replace(<span class="regexp">/^0+\./g</span>, <span class="string">&#x27;0.&#x27;</span>);</span><br><span class="line">  <span class="comment">// 保留一个.，替换其它的.</span></span><br><span class="line">  value = value.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;$#$&#x27;</span>).replace(<span class="regexp">/\./g</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;$#$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>js防抖和节流</title>
    <url>/2020/02/10/frontend/js%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>防抖和节流在前端性能优化中很常用，防抖和节流都是对一段时间内事件触发函数执行频率的控制；使用场景就是当频繁事件时怎样去处理函数执行。</p>
<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>在限定时间内，如果事件再次触发，丢弃当前已响应的函数执行，以当前事件响应函数重新计时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    wait = wait || <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            fn.apply(that, args);</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight javascript"><figcaption><span>_.debounce</span><a href="https://github.com/jashkenas/underscore/blob/master/underscore.js">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">_.debounce = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> timeout, result;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">     timeout = <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (args) result = func.apply(context, args);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> debounced = restArguments(<span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">     <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">       <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">       timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">       <span class="keyword">if</span> (callNow) result = func.apply(<span class="built_in">this</span>, args);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       timeout = _.delay(later, wait, <span class="built_in">this</span>, args);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">     timeout = <span class="literal">null</span>;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> debounced;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>在限定时间内，如果事件再次触发，忽略事件响应，当到达时间后函数执行后再开始事件响应</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    wait = wait || <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(that, args);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>_.debounce</span><a href="https://github.com/jashkenas/underscore/blob/master/underscore.js">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout, context, args, result;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> now = _.now();</span><br><span class="line">      <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">      <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">      context = <span class="built_in">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous = now;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(later, remaining);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    throttled.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      previous = <span class="number">0</span>;</span><br><span class="line">      timeout = context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>lodash集合的sortBy排序</title>
    <url>/2015/12/29/frontend/lodash%E9%9B%86%E5%90%88%E7%9A%84sortBy%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>lodash sortBy的用法</p>
<p>数组对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tags = [ </span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;php&#x27;</span>, <span class="attr">post_count</span>: <span class="number">2</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;html&#x27;</span>, <span class="attr">post_count</span>: <span class="number">3</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;lua&#x27;</span>, <span class="attr">post_count</span>: <span class="number">5</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;css&#x27;</span>, <span class="attr">post_count</span>: <span class="number">2</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;python&#x27;</span>, <span class="attr">post_count</span>: <span class="number">2</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;javascript&#x27;</span>, <span class="attr">post_count</span>: <span class="number">1</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;express&#x27;</span>, <span class="attr">post_count</span>: <span class="number">4</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;css3&#x27;</span>, <span class="attr">post_count</span>: <span class="number">6</span> &#125;,</span><br><span class="line">		&#123; <span class="attr">name</span>: <span class="string">&#x27;mongoose&#x27;</span>, <span class="attr">post_count</span>: <span class="number">0</span> &#125; </span><br><span class="line">	]</span><br></pre></td></tr></table></figure>

<p>以post_count升序排序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tags = _.sortBy(tags, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> item.post_count;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>

<p>以post_count降序排序，排序项加个负号：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tags = _.sortBy(tags, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> -item.post_count;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>lodash</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中使用基于客户端的缓存</title>
    <url>/2016/06/29/frontend/vue%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%9F%BA%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>在写<a href="https://github.com/liukaijv/lnode-blog">基于express、vuejs博客</a>的小项目过程中，折腾了下在<strong>vuejs</strong>中怎么使用浏览器缓存请求。</p>
<blockquote>
<p>原理是利用vue-resource拦截器interceptor，判断当前请求是否存在localStorage里，有则返回缓存的内容；没有则请求服务器，并在localStorage写入缓存。</p>
</blockquote>
<p>用到的依赖包：</p>
<ul>
<li><a href="https://github.com/pagekit/vue-resource">vue-resource</a> #一个vuejs的http包</li>
<li><a href="https://github.com/lodash/lodash">lodash</a> # js库</li>
<li><a href="https://github.com/pamelafox/lscache">lscache</a> #localStorage和sessionStorage包</li>
</ul>
<p>详细代码在<a href="https://github.com/liukaijv/lnode-blog/tree/master/frontend">https://github.com/liukaijv/lnode-blog/tree/master/frontend</a>。</p>
<span id="more"></span>

<h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><p>vue入口文件main.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Cache <span class="keyword">from</span> <span class="string">&#x27;lscache&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$cache = Cache;</span><br><span class="line">Vue.cache = Cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> httpCache <span class="keyword">from</span> <span class="string">&#x27;./lib/cache&#x27;</span>;</span><br><span class="line">httpCache(Vue);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>缓存拦截器cache.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">    Vue.http.interceptors.push(<span class="function">(<span class="params">request, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">// lifetime为缓存时间</span></span><br><span class="line">        <span class="keyword">let</span> cached, key, lifetime; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(request.cache !== <span class="literal">undefined</span> &amp;&amp; <span class="regexp">/^(GET|JSONP)$/i</span>.test(request.method)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_.isObject(request.cache)) &#123;</span><br><span class="line">                lifetime = request.cache.lifetime;</span><br><span class="line">                key = <span class="string">&#x27;_resource.&#x27;</span> + request.cache.key;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lifetime = request.cache;</span><br><span class="line">                key = request.url;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不需要缓存的请求，添加参数no_cache=true</span></span><br><span class="line">            <span class="keyword">let</span> no_cache = request.params.no_cache;</span><br><span class="line">            </span><br><span class="line">            cached = Vue.cache.get(key); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cached &amp;&amp; !no_cache) &#123;                </span><br><span class="line">                <span class="comment">// 重写返回数据</span></span><br><span class="line">                request.client = <span class="function"><span class="keyword">function</span> (<span class="params">request</span>) </span>&#123;                    </span><br><span class="line">                    <span class="keyword">return</span> request.respondWith(cached.body, &#123;<span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">status</span>:<span class="number">200</span>&#125;);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;   </span><br><span class="line">            <span class="keyword">if</span> (!cached &amp;&amp; response.ok) &#123;</span><br><span class="line">                Vue.cache.set(key, response, lifetime);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>关键点请求的client，返回数据<code>&#123;ok: true&#125;</code>必须有，这样才能正确返回数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.client = <span class="function"><span class="keyword">function</span> (<span class="params">request</span>) </span>&#123;                    </span><br><span class="line">    <span class="keyword">return</span> request.respondWith(cached.body, &#123;<span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">status</span>:<span class="number">200</span>&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>具体请查看源码<a href="https://github.com/pagekit/vue-resource/blob/master/src/http/index.js">https://github.com/pagekit/vue-resource/blob/master/src/http/index.js</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> client(<span class="keyword">new</span> Request(options)).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">// 原因在这里</span></span><br><span class="line">    <span class="keyword">return</span> response.ok ? response : <span class="built_in">Promise</span>.reject(response);</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">            error(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>react常用API总结</title>
    <url>/2016/06/15/frontend/react%E5%B8%B8%E7%94%A8API%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>其实react涉及的内容并不是很多，把react API整理了一下，版本为0.14.7。</p>
<span id="more"></span>

<h2 id="React相关"><a href="#React相关" class="headerlink" title="React相关"></a>React相关</h2><p>创建组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通</span></span><br><span class="line">React.createClass (&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> () </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无state的组件可以这样创建</span></span><br><span class="line"><span class="keyword">var</span> HelloMsg =&gt; <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123; <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ReactElement</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回ReactElement</span></span><br><span class="line">React.createElement(HTMLTag|ReactClass, &#123;props&#125;?, [children...]?)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回ReactElement</span></span><br><span class="line">React.cloneElement(ReactElement, &#123;props&#125;?, [children...]?)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回Boolean</span></span><br><span class="line">React.isValidElement(ReactElement)</span><br></pre></td></tr></table></figure>

<h2 id="ReactDOM相关"><a href="#ReactDOM相关" class="headerlink" title="ReactDOM相关"></a>ReactDOM相关</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// render</span></span><br><span class="line">ReactDOM.render (ReactElement, DOMElement, callback?)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回DOMElement</span></span><br><span class="line">ReactDOM.findDOMNode(ReactComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DOM 中移除已经挂载的 React 组件</span></span><br><span class="line">ReactDOM.unmountComponentAtNode(DOMElement)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="服务器渲染ReactDOMServer"><a href="#服务器渲染ReactDOMServer" class="headerlink" title="服务器渲染ReactDOMServer"></a>服务器渲染ReactDOMServer</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ReactDOMServer.renderToString (ReactElement)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会在dom上创建react 属性， 如data-react-id</span></span><br><span class="line">ReactDOMServer.renderToStaticMarkup (ReactElement)</span><br></pre></td></tr></table></figure>

<h2 id="组件Component-API"><a href="#组件Component-API" class="headerlink" title="组件Component API"></a>组件Component API</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改变状态</span></span><br><span class="line">setState ( FunctiOn *|&#123; nextState &#125;  ,  callBacK?  )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用reaner()而跳过shouldComponentUpdate()</span></span><br><span class="line">forceUpdate ( callBacK?  )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">render ()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化值</span></span><br><span class="line"><span class="title">constructor</span> (<span class="params"> props </span>) &#123; <span class="built_in">super</span>(props); <span class="built_in">this</span>.state = &#123;...&#125; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="组件Component事件"><a href="#组件Component事件" class="headerlink" title="组件Component事件"></a>组件Component事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">componentWillMount ()</span><br><span class="line"></span><br><span class="line">componentDidMount ()</span><br><span class="line"></span><br><span class="line">componentWillReceiveProps ( &#123;nextProps &#125;  )</span><br><span class="line"></span><br><span class="line">shouldComponentUpdate ( &#123;nextProps &#125;  ,  &#123;nextState &#125;  )</span><br><span class="line"></span><br><span class="line">componentWillUpdate ( &#123;nextProps &#125;  ,  &#123;nextState &#125;  </span><br><span class="line"></span><br><span class="line">componentDidUpdate ( &#123;previousProps &#125;  ,  &#123;previousState &#125;  )</span><br><span class="line"></span><br><span class="line">componentWillUnmount ()</span><br></pre></td></tr></table></figure>

<h2 id="Tag相关"><a href="#Tag相关" class="headerlink" title="Tag相关"></a>Tag相关</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">key &lt; ExampleComponent  key = <span class="string">&quot;uniqueValue&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">ref &lt; ExampleComponent  ref =&#123; S tRing |c allBacK &#125; /&gt;</span><br><span class="line"></span><br><span class="line">dangerouslySetInnerHTML &lt; span  dangerouslySetInnerHTML =&#123; <span class="attr">__Html</span>: <span class="built_in">String</span> &#125; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Props相关"><a href="#Props相关" class="headerlink" title="Props相关"></a>Props相关</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props.children &lt; Component &gt;&#123; <span class="built_in">this</span>.props.children &#125;&lt;/ Component &gt;</span><br><span class="line"></span><br><span class="line">... &lt; ExampleComponent  &#123; ... <span class="built_in">this</span>.props&#125; /&gt;</span><br><span class="line"></span><br><span class="line">ReactComponentClass.defaultProps  = DefaultPropertiesObject</span><br><span class="line"></span><br><span class="line">ReactComponentClass.propTypes  = PropertiesSpecificationObject</span><br></pre></td></tr></table></figure>

<h2 id="propTypes相关"><a href="#propTypes相关" class="headerlink" title="propTypes相关"></a>propTypes相关</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">React.PropTypes.array</span><br><span class="line"></span><br><span class="line">React.PropTypes.bool</span><br><span class="line"></span><br><span class="line">React.PropTypes.func</span><br><span class="line"></span><br><span class="line">React.PropTypes.number</span><br><span class="line"></span><br><span class="line">React.PropTypes.object</span><br><span class="line"></span><br><span class="line">React.PropTypes.string</span><br><span class="line"></span><br><span class="line">React.PropTypes.node (anything that can be rendered])</span><br><span class="line"></span><br><span class="line">React.PropTypes.element (ReactElement)</span><br><span class="line"></span><br><span class="line">React.PropTypes.instanceOf(Message) (must be <span class="keyword">of</span> javascript type)</span><br><span class="line"></span><br><span class="line">React.PropTypes.oneOf([<span class="string">&#x27;News&#x27;</span>, <span class="string">&#x27;Photos&#x27;</span>]) (specify enumerated values)</span><br><span class="line"></span><br><span class="line">React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]) (limit property types)</span><br><span class="line"></span><br><span class="line">React.PropTypes.arrayOf(React.PropTypes.number) (limit to a typed array)</span><br><span class="line"></span><br><span class="line">React.PropTypes.objectOf(React.PropTypes.number) (limit to a typed object)</span><br><span class="line"></span><br><span class="line">React.PropTypes.shape(&#123;<span class="attr">color</span>: React.PropTypes.string, <span class="attr">fontSize</span>: React.PropTypes.number&#125;) (limit to object <span class="keyword">with</span> specific keys/types)</span><br><span class="line"></span><br><span class="line">React.PropTypes.func.isRequired (produce an error <span class="keyword">if</span> the property isn<span class="string">&#x27;t passed to the child)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">React.PropTypes.any.isRequired (can be any object but must be required)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(props, propName, componentName) =&gt; Boolean (create a custom property with the following function signature)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>使用$.ajax上传文件到七牛</title>
    <url>/2016/01/09/frontend/%E4%BD%BF%E7%94%A8ajax%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E4%B8%83%E7%89%9B/</url>
    <content><![CDATA[<p>用jquery的ajax方法上传文件到七牛和常规的ajax有点区别，直接上代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $input = $(<span class="string">&#x27;#upload-qiniu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> token = <span class="string">&#x27;sMTdcnRxls_IaTJ1uSOR1Rb7zFkcdJq3LK0MPjR1:4k547QcZwzo2fK7zPJeu28UgXNM=:eyJzY29wZSI6Im9haGEiLCJkZWFkbGluZSI6MTQ0MTk2NzY1Mn0=&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://up.qiniu.com/&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> prefix = <span class="string">&#x27;http://7vii28.com1.z0.glb.clouddn.com/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$input.on(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> me = $(<span class="built_in">this</span>);</span><br><span class="line">	<span class="keyword">var</span> file = <span class="built_in">this</span>.files[<span class="number">0</span>];     </span><br><span class="line">	<span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(),</span><br><span class="line">	    filename = file.name;</span><br><span class="line">	formData.append(<span class="string">&#x27;token&#x27;</span>, token);</span><br><span class="line">	formData.append(<span class="string">&quot;file&quot;</span>, file);</span><br><span class="line">	$.ajax(&#123;  </span><br><span class="line">		<span class="attr">url</span> : url,  </span><br><span class="line">		<span class="attr">type</span> : <span class="string">&#x27;POST&#x27;</span>,  </span><br><span class="line">		<span class="attr">data</span> : formData, </span><br><span class="line">		<span class="attr">processData</span> : <span class="literal">false</span>, <span class="comment">// 对数据不作处理</span></span><br><span class="line">		<span class="attr">contentType</span> : <span class="literal">false</span> <span class="comment">// 使用原始类型</span></span><br><span class="line">	&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123; </span><br><span class="line">		<span class="built_in">console</span>.log(json);</span><br><span class="line">	&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;                </span><br><span class="line">		<span class="built_in">console</span>.log(json.responseJSON.error);</span><br><span class="line">	&#125;);              </span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>如果不能上传，可能是因为token已过期，可以用开发者工具查看xhr请求。</p>

<input type="file" id="upload-qiniu">
<script>
var $input = $('#upload-qiniu');
var token = 'sMTdcnRxls_IaTJ1uSOR1Rb7zFkcdJq3LK0MPjR1:4k547QcZwzo2fK7zPJeu28UgXNM=:eyJzY29wZSI6Im9haGEiLCJkZWFkbGluZSI6MTQ0MTk2NzY1Mn0=';
var url = 'http://up.qiniu.com/';
var prefix = 'http://7vii28.com1.z0.glb.clouddn.com/';

$input.on('change', function(){
	var me = $(this);
	var file = this.files[0];     
	var formData = new FormData(),
	    filename = file.name;
	formData.append('token', token);
	formData.append("file", file);
	$.ajax({  
		url : url,  
		type : 'POST',  
		data : formData, 
		processData : false,
		contentType : false
	}).done(function(json){ 
		console.log(json);
	}).fail(function(json){                
		console.log(json.responseJSON.error);
	});              
});
</script>


<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>ajax方法中的processData和contentType需要设置为false，关于这两个参数介绍：</p>
<ul>
<li>processData： 要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</li>
<li>contentType：要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>如何关闭微信内置浏览器</title>
    <url>/2015/12/28/frontend/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<p>做微信开发中发现window.close失效，不能关闭浏览器，解决如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeWindow</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">if</span> (wx != <span class="literal">undefined</span>) &#123;</span><br><span class="line">        wx.closeWindow();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span>(WeixinJSBridge) != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        WeixinJSBridge.call(<span class="string">&#x27;closeWindow&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>tricks</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>让jquery插件支持AMD和CMD规范</title>
    <url>/2015/03/28/frontend/%E8%AE%A9jquery%E6%8F%92%E4%BB%B6%E6%94%AF%E6%8C%81AMD%E5%92%8CCMD%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>jquery插件支持AMD和CMD规范的改造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line"><span class="meta">	 &quot;use strict&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; (define.amd || define.cmd)) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// register as anon module</span></span><br><span class="line">		define([<span class="string">&#x27;jquery&#x27;</span>], factory);</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// invoke directly</span></span><br><span class="line">		factory( (<span class="keyword">typeof</span>(jQuery) != <span class="string">&#x27;undefined&#x27;</span>) ? jQuery : <span class="built_in">window</span>.Zepto );</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"><span class="meta">	&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// your code</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>tricks</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装grafana</title>
    <url>/2022/01/24/software/centos7%E5%AE%89%E8%A3%85grafana/</url>
    <content><![CDATA[<p>设置源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/grafana.repo</span><br></pre></td></tr></table></figure>

<p>源文件内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[grafana]</span></span><br><span class="line"><span class="attr">name</span> = grafana</span><br><span class="line"><span class="attr">baseurl</span> = https://packages.grafana.com/oss/rpm</span><br><span class="line"><span class="attr">repo_gpgcheck</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span> = https://packages.grafana.com/gpg.key</span><br><span class="line"><span class="attr">sslverify</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">sslcacert</span> = /etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install grafana</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start grafana-server</span><br></pre></td></tr></table></figure>

<p>设为开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable grafana-server</span><br></pre></td></tr></table></figure>

<p>访问</p>
<p>访问<a href="http://localhost:3000/">http://localhost:3000</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>循环中正确绑定事件的N种方法</title>
    <url>/2016/02/27/frontend/%E5%BE%AA%E7%8E%AF%E4%B8%AD%E6%AD%A3%E7%A1%AE%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E7%9A%84N%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>面试中常考的题，把想到的方法都整理一下，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));</span><br><span class="line"></span><br><span class="line">  item.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + i + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码的意图是创建5个li,点击不同的li能够打印出当前li的序号。但是点击任何li打印出来的都是“列表 6 被点击“，因为i是函数级变量，5个内部函数都指向了同一个i ,而i最后一次赋值是5，当点击时i已经是6了。</p>
<span id="more"></span>

<h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>在函数定义里的变量，是会变的。要想让他变成某个具体的数，就要在当他等于那个具体的值时立即执行它</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));	</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">  item.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + j + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));</span><br><span class="line">  <span class="keyword">var</span> hadleClik = <span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">    item.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + i + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  hadleClik(item, i);</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));</span><br><span class="line">  <span class="keyword">var</span> handleClik = <span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">    item.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + i + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  hadleClik(item, i);</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));</span><br><span class="line"></span><br><span class="line">  item.onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + i + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line"></span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第五种"><a href="#第五种" class="headerlink" title="第五种"></a>第五种</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));</span><br><span class="line">	<span class="keyword">var</span> handleClik = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + i + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  item.onclick = handleClik(i);</span><br><span class="line"></span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第六种"><a href="#第六种" class="headerlink" title="第六种"></a>第六种</h2><p>用了let后，j 变成块级域（也就是花括号中的块，每进入一次花括号就生成了一个块级域）,所以 5 个内部函数指向了不同的 j 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;列表 &quot;</span> + i));</span><br><span class="line">	<span class="keyword">let</span> j = i;</span><br><span class="line">  item.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;列表 &quot;</span> + j + <span class="string">&quot; 被点击.&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  list.appendChild(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
  </entry>
  <entry>
    <title>深入理解JS执行细节</title>
    <url>/2016/08/04/frontend/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E6%89%A7%E8%A1%8C%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<p>以前看Tom大叔的深入理解JS系列介绍的很在错，但这篇文章短而好懂，mark一份。</p>
<blockquote>
<p>转自<a href="http://www.cnblogs.com/onepixel/p/5090799.html">http://www.cnblogs.com/onepixel/p/5090799.html</a></p>
</blockquote>
<p>javascript从定义到执行，JS引擎在实现层做了很多初始化工作，因此在学习JS引擎工作机制之前，我们需要引入几个相关的概念：执行环境栈、全局对象、执行环境、变量对象、活动对象、作用域和作用域链等，这些概念正是JS引擎工作的核心组件。这篇文章的目的不是孤立的为你讲解每一个概念，而是通过一个简单的demo来展开分析，全局讲解JS引擎从定义到执行的每一个细节，以及这些概念在其中所扮演的角色。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;  <span class="comment">//定义一个全局变量 x</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> x = <span class="number">2</span>;  <span class="comment">//定义一个局部变量 x</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">z</span>)</span>&#123; <span class="comment">//定义一个内部函数 B</span></span><br><span class="line">       <span class="built_in">console</span>.log(x+y+z);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> B; <span class="comment">//返回函数B的引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> C = A(<span class="number">1</span>); <span class="comment">//执行A,返回B</span></span><br><span class="line">C(<span class="number">1</span>); <span class="comment">//执行函数B</span></span><br></pre></td></tr></table></figure>

<p>这个demo是一个闭包，执行结果是4，下面我们将分全局初始化、执行函数A、执行函数B 三个阶段来分析JS引擎的工作机制:</p>
<span id="more"></span>

<h2 id="一、全局初始化"><a href="#一、全局初始化" class="headerlink" title="一、全局初始化"></a>一、全局初始化</h2><p>JS引擎在进入一段可执行的代码时，需要完成以下三个初始化工作：</p>
<p>首先，创建一个全局对象(Global Object) ， 这个对象全局只存在一份，它的属性在任何地方都可以访问，它的存在伴随着应用程序的整个生命周期。全局对象在创建时，将Math,String,Date,document 等常用的JS对象作为其属性。由于这个全局对象不能通过名字直接访问，因此还有另外一个属性window,并将window指向了自身，这样就可以通过window访问这个全局对象了。用伪代码模拟全局对象的大体结构如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个全局对象</span></span><br><span class="line"><span class="keyword">var</span> globalObject = &#123; </span><br><span class="line">    <span class="attr">Math</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">String</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">Date</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">document</span>:&#123;&#125;, <span class="comment">//DOM操作</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">window</span>:<span class="built_in">this</span> <span class="comment">//让window属性指向了自身</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，JS引擎需要构建一个执行环境栈( Execution Context Stack) ，与此同时，也要创建一个全局执行环境（Execution Context）EC ，并将这个全局执行环境EC压入执行环境栈中。执行环境栈的作用是为了保证程序能够按照正确的顺序被执行。在javascript中，每个函数都有自己的执行环境，当执行一个函数时，该函数的执行环境就会被推入执行环境栈的顶部并获取执行权。当这个函数执行完毕，它的执行环境又从这个栈的顶部被删除，并把执行权并还给之前执行环境。我们用伪代码来模拟执行环境栈和EC的关系：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ECStack = []; <span class="comment">//定义一个执行环境栈，类似于数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EC = &#123;&#125;;   <span class="comment">//创建一个执行空间，</span></span><br><span class="line"><span class="comment">//ECMA-262规范并没有对EC的数据结构做明确的定义，你可以理解为在内存中分配的一块空间</span></span><br><span class="line"></span><br><span class="line">ECStack.push(EC); <span class="comment">//进入函数，压入执行环境</span></span><br><span class="line">ECStack.pop(EC);  <span class="comment">//函数返回后，删除执行环境</span></span><br></pre></td></tr></table></figure>

<p>最后，JS引擎还要创建一个与EC关联的全局变量对象(Varibale Object) VO,  并把VO指向全局对象，VO中不仅包含了全局对象的原有属性，还包括在全局定义的变量x 和函数 A，与此同时，在定义函数A的时候，还为 A 添加了一个内部属性scope，并将scope指向了VO。每个函数在定义的时候，都会创建一个与之关联的scope属性，scope总是指向定义函数时所在的环境。此时的ECStack结构如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ECStack = [   <span class="comment">//执行环境栈</span></span><br><span class="line">    EC(G) = &#123;   <span class="comment">//全局执行环境</span></span><br><span class="line">        VO(G):&#123; <span class="comment">//定义全局变量对象</span></span><br><span class="line">            ... <span class="comment">//包含全局对象原有的属性</span></span><br><span class="line">            x = <span class="number">1</span>; <span class="comment">//定义变量x</span></span><br><span class="line">            A = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;; <span class="comment">//定义函数A</span></span><br><span class="line">            A[[scope]] = <span class="built_in">this</span>; <span class="comment">//定义A的scope，并赋值为VO本身</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="二、-执行函数A"><a href="#二、-执行函数A" class="headerlink" title="二、 执行函数A"></a>二、 执行函数A</h2><p>当执行进入A(1) 时，JS引擎需要完成以下工作：</p>
<p>首先，JS引擎会创建函数A的执行环境EC，然后EC推入执行环境栈的顶部并获取执行权。此时执行环境栈中有两个执行环境，分别是全局执行环境和函数A执行环境，A的执行环境在栈顶，全局执行环境在栈的底部。然后，创建函数A的作用域链(Scope Chain) ，在javascript中，每个执行环境都有自己的作用域链，用于标识符解析，当执行环境被创建时，它的作用域链就初始化为当前运行函数的scope所包含的对象。  </p>
<p>接着，JS引擎会创建一个当前函数的活动对象(Activation Object) AO，这里的活动对象扮演着变量对象的角色，只是在函数中的叫法不同而已（你可以认为变量对象是一个总的概念，而活动对象是它的一个分支）， AO中包含了函数的形参、arguments对象、this对象、以及局部变量和内部函数的定义，然后AO会被推入作用域链的顶端。需要注意的是，在定义函数B的时候，JS引擎同样也会为B添加了一个scope属性,并将scope指向了定义函数B时所在的环境，定义函数B的环境就是A的活动对象AO， 而AO位于链表的前端，由于链表具有首尾相连的特点，因此函数B的scope指向了A的整个作用域链。 我们再看看此时的ECStack结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ECStack = [   <span class="comment">//执行环境栈</span></span><br><span class="line">    EC(A) = &#123;   <span class="comment">//A的执行环境</span></span><br><span class="line">        [scope]:VO(G), <span class="comment">//VO是全局变量对象</span></span><br><span class="line">        AO(A) : &#123; <span class="comment">//创建函数A的活动对象</span></span><br><span class="line">            <span class="attr">y</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">x</span>:<span class="number">2</span>,  <span class="comment">//定义局部变量x</span></span><br><span class="line">            <span class="attr">B</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;, <span class="comment">//定义函数B</span></span><br><span class="line">            B[[scope]] = <span class="built_in">this</span>; <span class="comment">//this指代AO本身，而AO位于scopeChain的顶端，因此B[[scope]]指向整个作用域链</span></span><br><span class="line">            <span class="built_in">arguments</span>:[],<span class="comment">//平时我们在函数中访问的arguments就是AO中的arguments</span></span><br><span class="line">            <span class="attr">this</span>:<span class="built_in">window</span>  <span class="comment">//函数中的this指向调用者window对象</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">scopeChain</span>:<span class="xml">&lt;AO(A),A[[scope]]&gt;  //链表初始化为A[[scope]],然后再把AO加入该作用域链的顶端,此时A的作用域链：AO(A)-&gt;VO(G)</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    EC(G) = &#123;   //全局执行环境</span></span><br><span class="line"><span class="xml">        VO(G):&#123; //创建全局变量对象</span></span><br><span class="line"><span class="xml">            ... //包含全局对象原有的属性</span></span><br><span class="line"><span class="xml">            x = 1; //定义变量x</span></span><br><span class="line"><span class="xml">            A = function()&#123;...&#125;; //定义函数A</span></span><br><span class="line"><span class="xml">            A[[scope]] = this; //定义A的scope，A[[scope]] == VO(G)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">];</span></span><br></pre></td></tr></table></figure>

<h2 id="三、-执行函数B"><a href="#三、-执行函数B" class="headerlink" title="三、 执行函数B"></a>三、 执行函数B</h2><p>函数A被执行以后，返回了B的引用，并赋值给了变量C，执行 C(1) 就相当于执行B(1)，JS引擎需要完成以下工作：</p>
<p>首先，还和上面一样，创建函数B的执行环境EC，然后EC推入执行环境栈的顶部并获取执行权。 此时执行环境栈中有两个执行环境，分别是全局执行环境和函数B的执行环境，B的执行环境在栈顶，全局执行环境在栈的底部。（注意：当函数A返回后，A的执行环境就会从栈中被删除，只留下全局执行环境）然后，创建函数B的作用域链，并初始化为函数B的scope所包含的对象，即包含了A的作用域链。最后，创建函数B的活动对象AO,并将B的形参z, arguments对象 和 this对象作为AO的属性。此时ECStack将会变成这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ECStack = [   <span class="comment">//执行环境栈</span></span><br><span class="line">    EC(B) = &#123;   <span class="comment">//创建B的执行环境,并处于作用域链的顶端</span></span><br><span class="line">        [scope]:AO(A), <span class="comment">//指向函数A的作用域链,AO(A)-&gt;VO(G)</span></span><br><span class="line">        <span class="keyword">var</span> AO(B) = &#123; <span class="comment">//创建函数B的活动对象</span></span><br><span class="line">            <span class="attr">z</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">arguments</span>:[],</span><br><span class="line">            <span class="attr">this</span>:<span class="built_in">window</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">scopeChain</span>:<span class="xml">&lt;AO(B),B[[scope]]&gt;  //链表初始化为B[[scope]],再将AO(B)加入链表表头，此时B的作用域链：AO(B)-&gt;AO(A)-VO(G)</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    EC(A), //A的执行环境已经从栈顶被删除,</span></span><br><span class="line"><span class="xml">    EC(G) = &#123;   //全局执行环境</span></span><br><span class="line"><span class="xml">        VO:&#123; //定义全局变量对象</span></span><br><span class="line"><span class="xml">            ... //包含全局对象原有的属性</span></span><br><span class="line"><span class="xml">            x = 1; //定义变量x</span></span><br><span class="line"><span class="xml">            A = function()&#123;...&#125;; //定义函数A</span></span><br><span class="line"><span class="xml">            A[[scope]] = this; //定义A的scope，A[[scope]] == VO(G)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">];</span></span><br></pre></td></tr></table></figure>

<p>当函数B执行“x+y+z”时，需要对x、y、z 三个标识符进行一一解析，解析过程遵守变量查找规则：先查找自己的活动对象中是否存在该属性，如果存在，则停止查找并返回；如果不存在，继续沿着其作用域链从顶端依次查找，直到找到为止，如果整个作用域链上都未找到该变量，则返回“undefined”。从上面的分析可以看出函数B的作用域链是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AO(B)-&gt;AO(A)-&gt;VO(G)</span><br></pre></td></tr></table></figure>

<p>因此，变量x会在AO(A)中被找到，而不会查找VO(G)中的x，变量y也会在AO(A)中被找到，变量z 在自身的AO(B)中就找到了。所以执行结果：2+1+1=4.</p>
<h2 id="简单的总结语"><a href="#简单的总结语" class="headerlink" title="简单的总结语"></a>简单的总结语</h2><p>了解了JS引擎的工作机制之后，我们不能只停留在理解概念的层面，而要将其作为基础工具，用以优化和改善我们在实际工作中的代码，提高执行效率，产生实际价值才是我们的真正目的。就拿变量查找机制来说，如果你的代码嵌套很深，每引用一次全局变量，JS引擎就要查找整个作用域链，比如处于作用域链的最底端window和document对象就存在这个问题，因此我们围绕这个问题可以做很多性能优化的工作，当然还有其他方面的优化，此处不再赘述，本文仅当作抛砖引玉吧！</p>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
  </entry>
  <entry>
    <title>centos安装docker</title>
    <url>/2022/01/04/software/centos%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>按<a href="https://docs.docker.com/engine/install/centos/">官网</a>步骤</p>
<h2 id="删除旧的"><a href="#删除旧的" class="headerlink" title="删除旧的"></a>删除旧的</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h2 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>启用Nightly版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --enable docker-ce-nightly</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>搜索可用版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<p>指定版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装mysql</title>
    <url>/2022/01/07/software/centos7%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p>
<p>找到想要的版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libaio</span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-community-server-5.7.34-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.34-1.el7.x86_64.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示</span></span><br><span class="line">error: Failed dependencies:</span><br><span class="line">        mysql-community-client(x86-64) &gt;= 5.7.9 is needed by mysql-community-server-5.7.34-1.el7.x86_64</span><br><span class="line">        mysql-community-common(x86-64) = 5.7.34-1.el7 is needed by mysql-community-server-5.7.34-1.el7.x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>提示依赖<code>mysql-community-client</code>和<code>mysql-community-common</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-community-common-5.7.34-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-common-5.7.34-1.el7.x86_64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示和mariadb-libs冲突</span></span><br><span class="line">file /usr/share/mysql/czech/errmsg.sys from install of mysql-community-common-5.7.34-1.el7.x86_64 conflicts with file from package mariadb-libs-1:5.5.68-1.el7.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看出来删除掉</span></span><br><span class="line">rpm -qa|grep mariadb-libs</span><br><span class="line">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再重新安装mysql-community-common</span></span><br><span class="line"></span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-community-client-5.7.34-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.34-1.el7.x86_64.rpm</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">        mysql-community-libs(x86-64) &gt;= 5.7.9 is needed by mysql-community-client-5.7.34-1.el7.x86_64</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>提示依赖<code>mysql-community-libs</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-community-libs-5.7.34-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.34-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>一共需要下面4个文件</p>
<ul>
<li>mysql-community-client-5.7.34-1.el7.x86_64.rpm</li>
<li>mysql-community-common-5.7.34-1.el7.x86_64.rpm</li>
<li>mysql-community-libs-5.7.34-1.el7.x86_64.rpm</li>
<li>mysql-community-server-5.7.34-1.el7.x86_64.rpm</li>
</ul>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>如果没有设置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password &#x27;xxx&#x27;</span><br></pre></td></tr></table></figure>

<p>如果设置了密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 找到密码</span></span><br><span class="line">sudo grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;MyNewPass4!&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 出错</span></span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 降低密码强度</span></span><br><span class="line">set global validate_password_policy=0;</span><br><span class="line">set global validate_password_length=1;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql8，没这两个变量</span></span><br><span class="line">SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改为</span></span><br><span class="line">set global validate_password.policy=0;</span><br><span class="line">set global validate_password.length=1;</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7编译安装python3</title>
    <url>/2022/02/25/software/centos7%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python3/</url>
    <content><![CDATA[<p>安装编译依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zlib zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make</span><br></pre></td></tr></table></figure>

<p>找到要安装的对应版本<a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></p>
<p>下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tar.xz</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf Python-3.9.10.tar.xz</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入解压后的目录</span></span><br><span class="line">cd Python-3.9.10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置安装目录/usr/<span class="built_in">local</span>/python3</span></span><br><span class="line">./configure prefix=/usr/local/python3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>成功之后会生成<code>/usr/local/python3</code>目录</p>
<p>可能的问题:</p>
<ul>
<li>gcc版本太低，需要重新安装高版本的gcc</li>
</ul>
<p>替换自带的python</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 原python位置</span></span><br><span class="line">which python</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份</span></span><br><span class="line">mv /bin/python /bin/python_bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新链接</span></span><br><span class="line">ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>

<p>替换自带的pip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 原pip位置</span></span><br><span class="line">which pip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份</span></span><br><span class="line">mv /bin/pip /bin/pip_bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新链接</span></span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装jenkins遇到的问题</title>
    <url>/2022/02/23/software/centos%E5%AE%89%E8%A3%85jenkins/</url>
    <content><![CDATA[<p>官方网站<a href="https://pkg.jenkins.io/redhat-stable/">https://pkg.jenkins.io/redhat-stable/</a>，按着步骤来</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure>

<p>不成功，提示错误是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Resolving pkg.jenkins.io (pkg.jenkins.io)... 151.101.74.133, 2a04:4e42:1a::645</span><br><span class="line">Connecting to pkg.jenkins.io (pkg.jenkins.io)|151.101.74.133|:443... connected.</span><br><span class="line">ERROR: cannot verify pkg.jenkins.io&#x27;s certificate, issued by ‘/C=US/O=Let&#x27;s Encrypt/CN=R3’:</span><br><span class="line">  Issued certificate has expired.</span><br><span class="line">To connect to pkg.jenkins.io insecurely, use `--no-check-certificate&#x27;.</span><br></pre></td></tr></table></figure>

<p>加上<code>--no-check-certificate</code>再试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget --no-check-certificate -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">// jenkins.repo会添加到/etc/yum.repos.d/中</span><br><span class="line">cat /etc/yum.repos.d/jenkins.repo</span><br></pre></td></tr></table></figure>

<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure>

<p>不成功，提示错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Peer reports incompatible or unsupported protocol version.</span><br></pre></td></tr></table></figure>

<p>需要升级<code>curl</code>包，后再执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update -y nss curl libcurl </span><br></pre></td></tr></table></figure>

<h2 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h2><p>java已安装，跳过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure>

<h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure>

<p>不成功，提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Delta RPMs disabled because /usr/bin/applydeltarpm not installed.</span><br></pre></td></tr></table></figure>

<p>查找<code>applydeltarpm</code>的包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum provides &#x27;*/applydeltarpm&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Loaded plugins: langpacks                                                                                                                                                                                                                                                                                                                                     </span><br><span class="line">updates/7/x86_64/filelists_db                                                                                                                                                                             </span><br><span class="line">webtatic/x86_64/filelists_db                                                                                                                                                                             </span><br><span class="line">deltarpm-3.6-3.el7.x86_64 : Create deltas between rpms</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/bin/applydeltarpm</span><br></pre></td></tr></table></figure>

<p>安装<code>deltarpm</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y deltarpm</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装mongodb</title>
    <url>/2024/01/04/software/centos%E5%AE%89%E8%A3%85mongodb/</url>
    <content><![CDATA[<p>以centos安装mongodb4.2为例</p>
<h2 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h2><p>创建repo<code>/etc/yum.repos.d/mongodb-org-4.2.repo</code>，内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mongodb-org-4.2]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/7Server/mongodb-org/4.2/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc</span><br></pre></td></tr></table></figure>

<h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y mongodb-org</span><br></pre></td></tr></table></figure>

<h2 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mongod</span><br></pre></td></tr></table></figure>

<h2 id="开机运行mongodb"><a href="#开机运行mongodb" class="headerlink" title="开机运行mongodb"></a>开机运行mongodb</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable mongod</span><br></pre></td></tr></table></figure>

<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo </span><br><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user: &#x27;root&#x27;, pwd: &#x27;root&#x27;, roles: [&#x27;readWriteAnyDatabase&#x27;,&#x27;root&#x27;]&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="修改配置开启认证"><a href="#修改配置开启认证" class="headerlink" title="修改配置开启认证"></a>修改配置开启认证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/mongod.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure>

<h2 id="验证登录"><a href="#验证登录" class="headerlink" title="验证登录"></a>验证登录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongosh -u root --authenticationDatabase admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入密码</span></span><br></pre></td></tr></table></figure>

<h2 id="开启oplog"><a href="#开启oplog" class="headerlink" title="开启oplog"></a>开启oplog</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/mongod.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo</span><br><span class="line">use admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启</span></span><br><span class="line">rs.initiate()</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line">rs:PRIMARY&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>minikube安装</title>
    <url>/2021/02/10/software/linux%E4%B8%ADminikube%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本地安装<code>kubernetes</code>开发环境<code>minikube</code>。</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="https://minikube.sigs.k8s.io/docs/start/">minikube官网</a>选择系统对应的安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">sudo install minikube-linux-amd64 /usr/local/bin/minikube</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h2><p>启动<code>minikube</code>查看运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minikube start</span><br></pre></td></tr></table></figure>


<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>安装之后，apt用的是阿里镜像，运行<code>apt-get update</code>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W: GPG error: https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial InRelease: The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY FEEA9169307EA071 NO_PUBKEY 8B57C5C2836F4BEB</span><br><span class="line">E: The repository &#x27;https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial InRelease&#x27; is not signed.</span><br><span class="line">N: Updating from such a repository can&#x27;t be done securely, and is therefore disabled by default.</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>docker镜像本地中转上传到服务器</title>
    <url>/2025/10/17/software/docker%E9%95%9C%E5%83%8F%E6%9C%AC%E5%9C%B0%E4%B8%AD%E8%BD%AC%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>由于服务器网络原因，不能真的下载docker镜像，通过把docker镜像下载到本地，再传到服务器<br>以nginx为例：</p>
<h2 id="镜像拉到本地"><a href="#镜像拉到本地" class="headerlink" title="镜像拉到本地"></a>镜像拉到本地</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<h2 id="镜像保存为tar文件"><a href="#镜像保存为tar文件" class="headerlink" title="镜像保存为tar文件"></a>镜像保存为tar文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<h2 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz #nginx.tar文件到服务器</span><br></pre></td></tr></table></figure>

<h2 id="加载tar文件"><a href="#加载tar文件" class="headerlink" title="加载tar文件"></a>加载tar文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 80:80 nginx:latest --restart always</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中clash安装</title>
    <url>/2021/02/10/software/linux%E4%B8%ADclash%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>下载地址<a href="https://github.com/Dreamacro/clash/releases">github clash</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.8.0/clash-linux-amd64-v1.8.0.gz</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gunzip clash-linux-amd64-v1.8.0.gz</span><br></pre></td></tr></table></figure>

<p>创建clash目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir ~/clash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复制文件到<code>clash</code>目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv clash-linux-amd64-v1.8.0 ~/clash/clash</span><br></pre></td></tr></table></figure>

<p>进入<code>clash</code>目录下载配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/clash</span><br><span class="line">wget -O config.yaml https://xxx/config.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动<code>class</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./clash -d .</span><br><span class="line"># clash不能执行，加可执行权限</span><br><span class="line">sudo chmod +x clash</span><br></pre></td></tr></table></figure>

<p>打开<a href="http://clash.razord.top/">clash dashboard</a>，设置：Host: 127.0.0.1，端口: 9090</p>
<p>打开网络设置代理，HTTP和HTTPS代理为 127.0.0.1:7890，Socks代理为 127.0.0.1:7891。</p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs安装</title>
    <url>/2021/02/10/software/linux%E4%B8%ADnodejs%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>各个linux系统的包管理都可安装nodejs，但安装的版本往往不是自己想要的版本，最好是手动安装</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>去<a href="http://nodejs.cn/download/">nodejs中文网</a>找到自己想要的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://npmmirror.com/mirrors/node/v16.13.1/node-v16.13.1-linux-x64.tar.xz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v16.13.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<h2 id="移动到指定位置"><a href="#移动到指定位置" class="headerlink" title="移动到指定位置"></a>移动到指定位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mv node-v16.13.1-linux-x64 /usr/local/node</span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">sudo ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br><span class="line">sudo ln -s /usr/local/node/bin/npx /usr/bin/npx</span><br></pre></td></tr></table></figure>

<h2 id="添加到path"><a href="#添加到path" class="headerlink" title="添加到path"></a>添加到path</h2><p>在.profile或者.bashrc中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/node/bin</span><br></pre></td></tr></table></figure>

<h2 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry &quot;https://registry.npm.taobao.org&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装golang</title>
    <url>/2022/02/24/software/linux%E5%AE%89%E8%A3%85golang/</url>
    <content><![CDATA[<p>下载golang指定版本<a href="https://studygolang.com/dl">https://studygolang.com/dl</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget https://studygolang.com/dl/golang/go1.17.7.linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xvf go1.17.7.linux-amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统一放/usr/<span class="built_in">local</span></span></span><br><span class="line">sudo mv go/ /usr/local/</span><br></pre></td></tr></table></figure>

<p>设置环境变量</p>
<p>在<code>.bashrc</code>文件中添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure>

<p>激活环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>测试安装结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux编译安装gcc</title>
    <url>/2022/02/26/software/linux%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85gcc/</url>
    <content><![CDATA[<p>下载指定版本<a href="http://ftp.gnu.org/gnu/gcc/">http://ftp.gnu.org/gnu/gcc/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.xz</span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf gcc-8.1.0.tar.xz</span><br><span class="line">cd gcc-8.1.0</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">./contrib/download_prerequisites</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译目录</span></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置,安装到/usr/<span class="built_in">local</span>/gcc目录</span></span><br><span class="line">../configure --prefix=/usr/local/gcc --enable-languages=c,c++ --disable-multilib</span><br><span class="line"><span class="meta">#</span><span class="bash"> make</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>2cup+8g大概用了4个小时</p>
<p>加软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果有老的版本先备份</span></span><br><span class="line">sudo mv /usr/bin/gcc /usr/bin/gcc_bak</span><br><span class="line">sudo ln -s /usr/local/gcc/gcc /usr/bin/gcc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果有老的版本先备份</span></span><br><span class="line">sudo mv /usr/bin/g++ /usr/bin/g++_bak</span><br><span class="line">sudo ln -s /usr/local/gcc/g++ /usr/bin/g++</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>gcc</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mongo-shake使用</title>
    <url>/2025/01/08/software/mongo-shake%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget &quot;http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/196977/jp_ja/1608863913991/mongo-shake-v2.4.16.tar.gz&quot; -O mongoshake.tar.gz</span><br></pre></td></tr></table></figure>

<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zxvf mongoshake.tar.gz &amp;&amp; mkdir mongoshake &amp;&amp; mv mongo-shake-v2.4.16 mongoshake &amp;&amp; cd mongoshake/mongo-shake-v2.4.16</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi collector.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源mongodb地址</span></span><br><span class="line">mongo_urls = mongodb://mongoshake:mongoshake@172.18.67.252:27117/admin?connect=direct</span><br><span class="line"><span class="meta">#</span><span class="bash"> 目录mongodb地址</span></span><br><span class="line">tunnel.address = mongodb://user:password@127.0.0.1:27017/dbName?connect=direct</span><br><span class="line"><span class="meta">#</span><span class="bash"> 模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同步模式，all表示全量+增量同步，full表示全量同步，incr表示增量同步。</span></span><br><span class="line">sync_mode = full</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定库和集合,不要加引号，多个分号分隔</span></span><br><span class="line">filter.namespace.white = db1.col1;db2.col2</span><br></pre></td></tr></table></figure>

<h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./collector.linux -conf=collector.conf -verbose</span><br></pre></td></tr></table></figure>

<h2 id="mongodb用户权限"><a href="#mongodb用户权限" class="headerlink" title="mongodb用户权限"></a>mongodb用户权限</h2><p>源数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: &quot;mongoshake&quot;,</span><br><span class="line">    roles: [</span><br><span class="line">        &#123;</span><br><span class="line">            role: &quot;read&quot;,</span><br><span class="line">            db: &quot;local&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            role: &quot;readWrite&quot;,</span><br><span class="line">            db: &quot;mongoshake&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            role: &quot;read&quot;,</span><br><span class="line">            db: &quot;config&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            role: &quot;readAnyDatabase&quot;,</span><br><span class="line">            db: &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>目标数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use dbName</span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: &quot;dbUser&quot;,</span><br><span class="line">    roles: [</span><br><span class="line">        &#123;</span><br><span class="line">            role: &quot;readWrite&quot;,</span><br><span class="line">            db: &quot;dbName&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="完整说明"><a href="#完整说明" class="headerlink" title="完整说明"></a>完整说明</h2><p><a href="https://help.aliyun.com/zh/mongodb/user-guide/use-mongoshake-to-implement-one-way-synchronization-between-apsaradb-for-mongodb-replica-set-instances">https://help.aliyun.com/zh/mongodb/user-guide/use-mongoshake-to-implement-one-way-synchronization-between-apsaradb-for-mongodb-replica-set-instances</a></p>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>pip安装模块出现neither-setup.py-nor-pyproject.toml-found</title>
    <url>/2022/09/14/python/pip%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97%E5%87%BA%E7%8E%B0neither-setup-py-nor-pyproject-toml-found/</url>
    <content><![CDATA[<p>使用pip安装模块时出现<code>neither &#39;setup.py&#39; nor &#39;pyproject.toml&#39; found.</code>导致模块无法安装</p>
<p>因为根据打包方案，项目中需要一个setup.py或pyproject.toml用于生成包的配置文件，然而模块里没有按照这个规定来</p>
<p>网上搜了一遍，没找到解决方案</p>
<p>只能选择手动安装</p>
<p>去<a href="https://pypi.org/">https://pypi.org/</a>，找到相应的包，下载下来解压到python的<code>Lib</code>目录</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>pip设置国内镜像源</title>
    <url>/2022/09/22/python/pip%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p>用户目录，创建<code>.pip/pip.conf</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .pip</span><br><span class="line">vi pip.conf</span><br></pre></td></tr></table></figure>

<p>输入内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<h2 id="其它镜像源"><a href="#其它镜像源" class="headerlink" title="其它镜像源"></a>其它镜像源</h2><ul>
<li>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>
<li>中科大：<a href="https://pypi.mirrors.ustc.edu.cn/simple">https://pypi.mirrors.ustc.edu.cn/simple</a></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>在centos7上安装php</title>
    <url>/2016/03/03/software/%E5%9C%A8centos7%E4%B8%8A%E5%AE%89%E8%A3%85php/</url>
    <content><![CDATA[<p>###默认安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install php</span><br></pre></td></tr></table></figure>

<p>默认的版本太低了，手动安装有一些麻烦，想采用Yum安装的可以使用下面的方案：</p>
<h5 id="检查当前安装的PHP包"><a href="#检查当前安装的PHP包" class="headerlink" title="检查当前安装的PHP包"></a>检查当前安装的PHP包</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list installed | grep php</span><br></pre></td></tr></table></figure>

<p>如果有安装的PHP包，先删除他们</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove php.x86_64 php-cli.x86_64 php-common.x86_64 php-gd.x86_64 php-ldap.x86_64 php-mbstring.x86_64 php-mcrypt.x86_64 php-mysql.x86_64 php-pdo.x86_64</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h5><p>Centos 5.X</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://mirror.webtatic.com/yum/el5/latest.rpm</span><br></pre></td></tr></table></figure>
<p>Centos 6.X</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</span><br></pre></td></tr></table></figure>

<p>Centos 7.X</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure>
<p>使用yum list命令查看可安装的包(Packege)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list --enablerepo=webtatic | grep php</span><br></pre></td></tr></table></figure>

<p>如果想删除上面安装的包，重新安装<br>rpm -qa | grep webstatic<br>rpm -e  上面搜索到的包即可</p>
<h5 id="运行yum-install"><a href="#运行yum-install" class="headerlink" title="运行yum install"></a>运行yum install</h5><p>php指定版本对应，55w、56w、70w</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64</span><br></pre></td></tr></table></figure>


<h5 id="安装PHP-FPM"><a href="#安装PHP-FPM" class="headerlink" title="安装PHP FPM"></a>安装PHP FPM</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install php55w-fpm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>python类中方法返回自身值类型的写法</title>
    <url>/2022/09/14/python/python%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E8%87%AA%E8%BA%AB%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<p>在python3中使用类型遇到的问题，代码如下：</p>
<p>想在<code>factory</code>创建自已，以为类型是这样的<code>-&gt; People</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, name: <span class="built_in">str</span></span>) -&gt; People:</span></span><br><span class="line">        <span class="keyword">return</span> cls(name)</span><br></pre></td></tr></table></figure>

<p>这样的错的</p>
<p>正确的写法是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Type</span></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>, bound=<span class="string">&#x27;People&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls: <span class="type">Type</span>[T], name: <span class="built_in">str</span></span>) -&gt; T:</span></span><br><span class="line">        <span class="keyword">return</span> cls(name)</span><br></pre></td></tr></table></figure>

<p>要写成泛型才对，问题地址：<a href="https://github.com/python/peps/pull/89">https://github.com/python/peps/pull/89</a></p>
<h2 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h2><p>类型写成字符串也是可以的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factory</span>(<span class="params">cls, name: <span class="built_in">str</span></span>) -&gt; &quot;People&quot;:</span></span><br><span class="line">        <span class="keyword">return</span> cls(name)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下缺失fcntl报错</title>
    <url>/2022/09/12/python/windows%E4%B8%8B%E7%BC%BA%E5%A4%B1fcntl%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>windows下运行python项目，报错<code>ModuleNotFoundError: No module named &#39;fcntl&#39;</code></p>
<p><code>fcntl</code>库是<code>linix</code>的Python发行版才有，<code>windows</code>没有带</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>pip安装缺失的包，这个地址去搜索<a href="https://libraries.io/search?q=micropython">https://libraries.io/search?q=micropython</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install micropython-xxx</span><br></pre></td></tr></table></figure>

<p>仓库地址：<a href="https://github.com/micropython/micropython">https://github.com/micropython/micropython</a></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在python库文件目录<code>D:\Python\Python38\Lib\site-packages</code>中创建’<code>fcnty</code>文件，内容为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fcntl</span>(<span class="params">fd, op, arg=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ioctl</span>(<span class="params">fd, op, arg=<span class="number">0</span>, mutable_flag=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> mutable_flag:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flock</span>(<span class="params">fd, op</span>):</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lockf</span>(<span class="params">fd, operation, length=<span class="number">0</span>, start=<span class="number">0</span>, whence=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript获取浏览器视口大小</title>
    <url>/2015/01/05/frontend/html/javascript%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E5%8F%A3%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewport</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode == <span class="string">&#x27;BackCompat&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="built_in">document</span>.body.clientWitdh,</span><br><span class="line">            <span class="attr">height</span>: <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">            <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>a标签伪类顺序</title>
    <url>/2014/12/29/frontend/css/a%E6%A0%87%E7%AD%BE%E4%BC%AA%E7%B1%BB%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>a标签的link、visited、hover、active通常的顺序为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#000</span>;&#125; <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#F00</span>;&#125; <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: <span class="number">#0F0</span>;&#125; <span class="comment">/* 鼠标在链接上 */</span> </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#00F</span>;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>实现网站变灰</title>
    <url>/2022/12/02/frontend/css/%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E5%8F%98%E7%81%B0/</url>
    <content><![CDATA[<p>css实现网站变灰</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -moz-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -ms-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -o-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">    -webkit-<span class="attribute">filter</span>: gray;</span><br><span class="line">    <span class="attribute">filter</span>: gray;</span><br><span class="line">    <span class="attribute">filter</span>: progid:dximagetransform.microsoft.<span class="built_in">basicimage</span>(grayscale=<span class="number">1</span>) /*ie*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>src和href的区别</title>
    <url>/2014/11/05/frontend/html/src%E5%92%8Chref%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>href(Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。</p>
<p>src(Source)属性仅仅嵌入当前资源到当前文档元素定义的位置。</p>
<p>两者最大的区别在于<code>src</code>在浏览器下载，编译，执行这个文件之前页面的加载和处理会被暂停；而<code>href</code>页面解析不会暂停。</p>
<blockquote>
<p>href是与资源建立关系，src是用资源替换到当前位置</p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>html</category>
      </categories>
  </entry>
  <entry>
    <title>同时使用flex、white-space和overflow的bug</title>
    <url>/2016/01/28/frontend/css/%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8flex%E5%92%8Cwhite-space%E5%92%8Coverflow%E7%9A%84bug/</url>
    <content><![CDATA[<p>写这个博客文章列表标题时遇到的bug，当flex和white-space、overflow一起用的时候，发现overflow:hidden失效了。代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>

<p>解决办法：再加上min-width: 0属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">min-width</span>:<span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>触发display为none元素的动画效果</title>
    <url>/2016/02/23/frontend/css/%E8%A7%A6%E5%8F%91display%E4%B8%BAnone%E5%85%83%E7%B4%A0%E7%9A%84%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>写模态框时，当模态框show的时候动画没有，原来是元素有display:none时添加样式里css3的变幻效果无法生效，解决的方法总结，测试代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.modal</span>&#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.modal</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> <span class="attr">id</span>=<span class="string">&quot;trigger&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#model1&quot;</span>&gt;</span>运行动画<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;model1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>



<style>
.modal{
  z-index: 100;
  height: 200px;
  width: 200px;
  background: yellow;
  transition: all 1s;
  display:none;
}
.modal.active{
  background: red;
  transform: translateX(100px);
}
</style>



<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>元素显示后再触发重绘就能让动画生效，读取Layout属性可以触发repaint，这些属性有offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()等，用jquery的话与这些属性相关的都行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#trigger1&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $target = $($(<span class="built_in">this</span>).data(<span class="string">&#x27;target&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span> ($target) &#123;</span><br><span class="line">    $target.show();</span><br><span class="line">    <span class="comment">// $target.width(); </span></span><br><span class="line">    $target[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    $target.addClass(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<a href="javascript:" id="trigger1" data-target="#model1">运行动画</a>
<div id="model1" class="modal"></div>

<script>
$('#trigger1').click(function () {
  var $target = $($(this).data('target'));
  if ($target) {
    $target.show();
    // $target.width(); 
    $target[0].offsetWidth;
    $target.addClass('active');
  }
});
$('.modal').on('transitionend', function (e) {
  $(this).hide().removeClass('active');
});
</script>



<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>利用了js的setTimout</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#trigger2&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $target = $($(<span class="built_in">this</span>).data(<span class="string">&#x27;target&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span> ($target) &#123;</span><br><span class="line">    $target.show();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $target.addClass(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<a href="javascript:" id="trigger2" data-target="#model2">运行动画</a>
<div id="model2" class="modal"></div>

<script>
$('#trigger2').click(function () {
  var $target = $($(this).data('target'));
  if ($target) {
    $target.show();
    setTimeout(function () {
      $target.addClass('active');
    }, 0);
  }
});
$('.modal').on('transitionend', function (e) {
  $(this).hide().removeClass('active');
});
</script>



<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>用visibility代替display隐藏元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#modal3</span>&#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">visibility</span>:hidden;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">clip</span>:<span class="built_in">rect</span>(<span class="number">1px</span>, <span class="number">1px</span>, <span class="number">1px</span>, <span class="number">1px</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#modal3</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">clip</span>: auto;</span><br><span class="line">  <span class="attribute">visibility</span>:visible;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#trigger3&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $target = $($(<span class="built_in">this</span>).data(<span class="string">&#x27;target&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span> ($target) &#123;</span><br><span class="line">    $target.show();</span><br><span class="line">    $target.addClass(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<style>
#modal3{
  z-index: 100;
  height: 200px;
  width: 200px;
  background: yellow;
  transition: all 1s;
  visibility:hidden;
  position: absolute;
  clip:rect(1px, 1px, 1px, 1px);
  overflow: hidden;
}
#modal3.active{
  position: relative;
  clip: auto;
  visibility:visible;
  background: red;
  transform: translateX(100px);
}
</style>
<a href="javascript:" id="trigger3" data-target="#modal3">运行动画</a>
<div id="modal3"></div>

<script>
$('#trigger3').click(function () {
  var $target = $($(this).data('target'));
  if ($target) {
    $target.show();
    $target.addClass('active');
  }
});
$('#modal3').on('transitionend', function (e) {
  $(this).removeClass('active');
});
</script>

]]></content>
      <categories>
        <category>前端开发</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
</search>
